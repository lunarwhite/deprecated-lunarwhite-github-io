<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>lunarwhite</title><link>https://lunarwhite.github.io/</link><description>Recent content on lunarwhite</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><copyright>© lunarwhite</copyright><lastBuildDate>Thu, 26 Aug 2021 11:21:31 +0000</lastBuildDate><atom:link href="https://lunarwhite.github.io/index.xml" rel="self" type="application/rss+xml"/><item><title>Ask and answer</title><link>https://lunarwhite.github.io/posts/thoughts/ask-and-answer/</link><pubDate>Thu, 26 Aug 2021 11:21:31 +0000</pubDate><guid>https://lunarwhite.github.io/posts/thoughts/ask-and-answer/</guid><description>Guide How To Ask Questions The Smart Way Offer basic infos 编程语言 在做什么事情中遇到了问题 如 Anaconda install pacakge 报错信息 Asking patterns I am searching for a long time on net. But no use. Please help or try to give some ideas how to achieve this.找了很久未果，求助攻 after searching around for a decent XX solution and found that everything out there was difficult to use. 找了N种方法都发现太难了 I' ve looked around and apparently I've got the choice between these libraries/ solutions:说明自己是努力搜索过的，然后目前有了哪几种方案 which seems it's a promising solution.</description></item><item><title>Be a qualified software engineer - Ⅱ</title><link>https://lunarwhite.github.io/posts/thoughts/mottosasdev2/</link><pubDate>Mon, 23 Aug 2021 21:02:12 +0000</pubDate><guid>https://lunarwhite.github.io/posts/thoughts/mottosasdev2/</guid><description>一个合格的开发者至少应该做到的
1 规范开发 Git Linux Docker/Kubernetes File Structure Document Check Style Unit Test CI/CD Script 2 参与社区 Open-Source Product Community&amp;rsquo;s Tech Blog Issue Pull Request Join Organization Code Review</description></item><item><title>Be a qualified software engineer - Ⅰ</title><link>https://lunarwhite.github.io/posts/thoughts/mottosasdev1/</link><pubDate>Mon, 23 Aug 2021 15:18:07 +0000</pubDate><guid>https://lunarwhite.github.io/posts/thoughts/mottosasdev1/</guid><description>大学以来，从自己经历的和我看到的，做一个总结（不定期更新
其实题目与内容并不完全契合，因为有些不只是开发人员才应该注意的，或许以后会优化拆分
1 软件使用 360浏览器/xx浏览器😟 Firefox/Chromium(Edge/Chrome)😊 xx管家/xx杀毒😟 Windows Defender😊 QQ/微信/..直接装在主机 😟 装在沙盒/虚拟机😊 过时的工具😟 社区活跃的&amp;amp;用户基数大的😊 未授权的/破解的工具😟 付费授权的/免费的😊 混乱的软件安装来源&amp;amp;路径😟 包管理工具(Homebrew/Scoop)😊 2 开发习惯 原生CMD&amp;amp;PowerShell😟 Windows Terminal/MobaXterm😊 优先闭源的工具😟 优先开源的工具😊 优先本地开发😟 优先远程服务器😊 优先Windows😟 优先Linux😊 优先富文本😟 优先标记语言(LaTex/MarkDown)😊 混乱的代码文件路径&amp;amp;版本😟 版本控制😊 3 信息获取 百度搜索😟 Bing搜索/Google搜索😊 优先CSDN😟 优先官方文档+StackOverflow😊 老旧过时的课本😟 开放的&amp;amp;与时俱进的在线资源😊 表面干货的引流洗稿自媒体😟 大佬的社区动态😊 4 心态调整 从群体的大多数中寻找安全感😟 有自己的主见😊 成为做题家死磕GPA😟 多实践早去业界接受毒打😊 固执己见目空一切😟 友善交流虚心学习😊 Do one thing, and do it well😊 我是个学生😟 我是个开发者😊 以学会&amp;hellip;为目标😟 以开发出&amp;hellip;为目标😊 程序不能跑😟 程序和你有一个能跑😊 死磕Bug😟 开心最重要😊</description></item><item><title>[MIT-missing] 07 Potpourri, Q&amp;A</title><link>https://lunarwhite.github.io/posts/notes/mitmissing7/</link><pubDate>Tue, 03 Aug 2021 19:41:22 +0000</pubDate><guid>https://lunarwhite.github.io/posts/notes/mitmissing7/</guid><description>Potpourri - missing-semester
Q&amp;amp;A - missing-semester
1 Daemons Most computers have a series of processes that are always running in the background rather than waiting for a user to launch them and interact with them. These processes are called daemons and the programs that run as daemons often end with a d to indicate so. For example sshd, the SSH daemon, is the program responsible for listening to incoming SSH requests and checking that the remote user has the necessary credentials to log in.</description></item><item><title>[MIT-missing] 06 Security &amp; Cryptography</title><link>https://lunarwhite.github.io/posts/notes/mitmissing6/</link><pubDate>Thu, 29 Jul 2021 14:51:12 +0000</pubDate><guid>https://lunarwhite.github.io/posts/notes/mitmissing6/</guid><description>Security and Cryptography - missing-semester
1 Entropy Entropy is a measure of randomness. This is useful, for example, when determining the strength of a password. Entropy is measured in bits, and when selecting uniformly at random from a set of possible outcomes, the entropy is equal to log_2(# of possibilities). A fair coin flip gives 1 bit of entropy. A dice roll (of a 6-sided die) has ~2.</description></item><item><title>[MIT-missing] 05 Metaprogramming</title><link>https://lunarwhite.github.io/posts/notes/mitmissing5/</link><pubDate>Tue, 27 Jul 2021 21:01:18 +0000</pubDate><guid>https://lunarwhite.github.io/posts/notes/mitmissing5/</guid><description>Metaprogramming - missing-semester
1 build systems make is one of the most common build systems out there. When you run make, it consults a file called Makefile in the current directory. All the targets, their dependencies, and the rules are defined in that file. Let’s take a look at one: paper.pdf: paper.tex plot-data.png pdflatex paper.tex plot-%.png: %.dat plot.py ./plot.py -i $*.dat -o $@ Each directive in this file is a rule for how to produce the left-hand side using the right-hand side.</description></item><item><title>[MIT-missing] 04 Version Control (Git)</title><link>https://lunarwhite.github.io/posts/notes/mitmissing4/</link><pubDate>Sun, 25 Jul 2021 22:11:48 +0000</pubDate><guid>https://lunarwhite.github.io/posts/notes/mitmissing4/</guid><description>Version Control (Git) - missing-semester
1 git’s data model 1.1 snapshots Git models the history of a collection of files and folders within some top-level directory as a series of snapshots. In Git terminology, a file is called a “blob”, and it’s just a bunch of bytes. A directory is called a “tree”, and it maps names to blobs or trees (so directories can contain other directories). A snapshot is the top-level tree that is being tracked.</description></item><item><title>[MIT-missing] 03 Command-line Environment</title><link>https://lunarwhite.github.io/posts/notes/mitmissing3/</link><pubDate>Sat, 24 Jul 2021 20:11:48 +0000</pubDate><guid>https://lunarwhite.github.io/posts/notes/mitmissing3/</guid><description>Command-line Environment - missing-semester
1 Job Control To kill a process, type Ctrl-C. To pause and backgrounding processes, type Ctrl-Z. 2 Aliases It can become tiresome typing long commands that involve many flags or verbose options. For this reason, most shells support aliasing. A shell alias is a short form for another command that your shell will replace automatically for you. For instance, an alias in bash has the following structure: alias alias_name=&amp;#34;command_to_alias arg1 arg2&amp;#34; Note that there is no space around the equal sign =, because alias is a shell command that takes a single argument.</description></item><item><title>[MIT-missing] 02 Data Wrangling</title><link>https://lunarwhite.github.io/posts/notes/mitmissing2/</link><pubDate>Thu, 22 Jul 2021 15:11:48 +0000</pubDate><guid>https://lunarwhite.github.io/posts/notes/mitmissing2/</guid><description>Data Wrangling - missing-semester
1 introduction To wrangle data, we need two things: data to wrangle, and something to do with it. Logs often make for a good use-case, because you often want to investigate things about them, and reading the whole thing isn’t feasible. Let’s figure out who’s trying to log into my server by looking at my server’s log: ssh myserver journalctl That’s far too much stuff.</description></item><item><title>[MIT-missing] 01 The shell</title><link>https://lunarwhite.github.io/posts/notes/mitmissing1/</link><pubDate>Wed, 21 Jul 2021 15:21:48 +0000</pubDate><guid>https://lunarwhite.github.io/posts/notes/mitmissing1/</guid><description>Course overview + the shell - missing-semester
Shell Tools and Scripting - missing-semester
01 - intro some commands 1.1 which which echo # /bin/echo which ls # /usr/bin/ls 1.2 $PATH echo $PATH # /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games 1.3 permission ls -l /home # drwxr-xr-x 18 himeself65 himeself65 4096 Aug 16 17:53 himeself65 d: tells us that himeself65 is a directory. rwx, r-x and r-x: &amp;ldquo;the owner&amp;rdquo;, &amp;ldquo;the owning group&amp;rdquo; and &amp;ldquo;everyone else&amp;rdquo;.</description></item><item><title>Dilemma in software engineering education @tison</title><link>https://lunarwhite.github.io/posts/thoughts/dilemma-in-se/</link><pubDate>Sat, 03 Jul 2021 23:07:58 +0000</pubDate><guid>https://lunarwhite.github.io/posts/thoughts/dilemma-in-se/</guid><description>原文链接
0 引入 第一段出自《软件困局》一书中文版译序。
软件专业的学生并没有学到在团队中如何编写便于后续维护的软件，他们在大学里完成的软件作业仅达到了课程项目的要求，却与业内软件开发的实际规模和真实复杂度完全脱节。
第二段出自《黑客与画家》一文。
黑客真正想做的是设计优美的软件，考核这种工作是非常困难的&amp;hellip;大学和实验室把论文数量作为考核黑客工作的指标&amp;hellip;这样的考核容易实施，而容易实施的考核总是首先被采用&amp;hellip;大学和实验室不允许黑客做他们想做的事情。
1 设计与研究 黑客的工作不是学术研究，而是软件设计。研究必须是【新】的，但不一定是【好】的；设计不一定是【新】的，但一定是【好】的。
黑客的工作往往不是从头做起，而是在现有成果的基础上做一些小小的调整，或者将已有的观点用比较新的方式组合起来。这种类型的工作很难用研究性的论文来表达。
例如，TDengine 的创始人陶建辉在《我为何要开发一个专用的物联网大数据平台，还开源它？》一文里提到时序数据库和消息队列的关系，
2008年，我创办和信，推送平台除推送之外，一个重要的模块就是消息队列。2009年，我们就研发了一个分布式高可靠、持久化存储的消息队列，每台手机需要推送的消息就放在一个队列里。消息队列与物联网的时序数据有区别吗？本质上没有。一个是非结构化的，一个是结构化的；一个是简单的进和出，但另外一个是需要有分析和计算的；两者在系统的架构设计上没有大的不同。
这就是典型的黑客思路，体现出对整个领域的把握。
相反，计算机科学专业的课程里很少有这样的整体性关联分析能力的培训。例如，数据库课程就是照本宣科的记忆关系代数，背诵隔离级别。学完这门课以后，我仍然不知道一个典型的数据库管理系统包括哪些组成部分，例如 PostgreSQL 的架构和核心对象；我仍然不知道在大作业上我连接数据库时采用的数据库连接协议是怎么工作的，例如 ODBC 客户端和 DBMS 的交互，查询优化与执行，以及数据传输的过程。
数据库尤其是分布式数据库的实现是软件行业成果集大成的领域。数据库的架构大致可以分成以下几个部分，
Client Parser Optimizer Execution Transaction Storage 这里面，语法分析、算法分析、操作系统、网络传输、并发控制、数据转换以及数据存储相关的知识都会有所体现和应用。例如 Parser 就是一个典型的语法分析应用，Optimizer 涉及了复杂的算法分析，为了获得性能和扩展性，在架构的各个部分都需要并发和网络传输相关的知识。
这些在数据库课程里都不会讲，数据库课程的核心是学习数学化的关系代数和背诵事务隔离级别。我时常想，为什么数据库课程不对着 PostgreSQL 开始讲如何设计一个数据库管理系统呢？
又例如，工业级软件往往由多个模块以及复杂的依赖所组成。分布式数据分析系统 Materialize 由 SQL 语法解析器、查询优化器以及执行计划到 Dataflow 的编译器等部分所组成，同时采用了成熟的 sqlparser-rs 库作为 SQL 解析器的基础。
基于第三方依赖完成工作在大学课程里是罕见的，学生往往在很长时间里都在编写单文件的玩具程序，例如典型的算法竞赛程序。由于此类程序在检验时受限的环境，往往学生每次都要自己编写底层的数据结构，并执着于处理数字或者字符串类型。
我并不否认算法在程序设计当中的作用，但是纯粹算法的研究更像是数学家或者计算机博物学家的工作。例如，对于我来说，纯粹的介绍二叉树及其各种实现，是非常难以理解的。如果结合 LevelDB 的实现，或者 Linux 文件系统的实现来引入和讲解，甚至实现一个小型的在查询数据结构上做出优化的对应的系统，都将是及其有趣并且受益终生的。
对于算法，应该参考前文关于计算理论的描述，按需取用，按需了解，无需崇拜。
这方面的课程有没有好的例子呢？在我的印象里有一例，那就是编译实习。
我在上编译实习课的时候，恰好在 Perl 6 社区活跃。这门语言非常神奇的内置了自定义语法的支持，我于是拿来作为编译实习课程要求实现的编译器的基础语言，也就是说，完成了一个 Perl 6 实现的精简版 C 语言编译器项目。</description></item><item><title>HPC - MIC</title><link>https://lunarwhite.github.io/posts/guides/hpc-mic/</link><pubDate>Wed, 30 Jun 2021 10:38:49 +0000</pubDate><guid>https://lunarwhite.github.io/posts/guides/hpc-mic/</guid><description>1 初识与MIC 1.0 MIC应用模式 CPU原生模式 offload：CPU为主MIC为辅模式（最常用） CPU与MIC对等模式 MIC为主CPU为辅模式 native：MIC原生模式 1.1 offload, pi #include&amp;lt;stdio.h&amp;gt;#include&amp;lt;stdlib.h&amp;gt;#include&amp;lt;math.h&amp;gt; int main(){ float pi=0.0f; int count=10000; int i; #pragma offload target (mic) #pragma omp parallel for reduction(+:pi) for(i=0;i&amp;lt;count;i++){ float t=(float)((i+0.5f)/count); pi+=4.0f/(1.0f+t*t); } pi/=count; printf(&amp;#34;PI=%f\n&amp;#34;,pi); return 0; } icc -openmp 6-1.c -o 6-1.out -limf -lm ./6-1.out 1.2 offload, in #include&amp;lt;stdio.h&amp;gt;#include&amp;lt;stdlib.h&amp;gt;#include&amp;lt;math.h&amp;gt;#define LEN (10) int main(){ float* arr; int i; arr=(float*)malloc(LEN*sizeof(float)); for(i=0;i&amp;lt;LEN;++i){ arr[i]=i; } i=0; #pragma offload target(mic) in(arr:length(LEN)) for(i=0;i&amp;lt;LEN;++i){ printf(&amp;#34;on mic: arr[%d]=%f\n&amp;#34;,i,arr[i]); arr[i]=0; } for(i=0;i&amp;lt;LEN;++i){ printf(&amp;#34;on cpu: arr[%d]=%f\n&amp;#34;,i,arr[i]); } return 0; } icc 6-2.</description></item><item><title>Deeplearning introduction - Ⅱ</title><link>https://lunarwhite.github.io/posts/guides/dl-intro2/</link><pubDate>Thu, 24 Jun 2021 20:21:48 +0000</pubDate><guid>https://lunarwhite.github.io/posts/guides/dl-intro2/</guid><description>1 目标检测 1.1 简介 目标定位 目标检测 1.2 过程 全连接层转化成卷积层 卷积运算 用卷积实现滑动窗口检测 思路：首选确定一个矩形窗口——&amp;gt;然后将这个窗口按照一定的stride,遍历裁剪图片——&amp;gt;分别对每一张裁剪得到的图片，做图片分类 优点：共享权重参数，操作一次就可以完成，提高了整个算法的效率 缺点：边界框的位置可能不够准确 定义Label $[Pc,Bx,By,Bw,Bh,&amp;hellip;..]$ $bx, by$：相对于单个小方格的位置，一定是$[0,1]$ $bh, bw$：相对于单个小方格边长的长度，可能$&amp;gt;1$ Bounding-Box预测 将原图像划分为$n∗n$个小格 对于每一个对象，在标注的时候分析出其中点$b_x, b_y$，然后将这个对象的中点分配到对应的小格子中。因此一个对象最多被分配到一个小格子中 于每一个小格子，输出将是一个$5+K$的向量，$K$为类别数量 IoU交并比（集合概念） 预测的边框，和真实的边框，的交集和并集的比值 衡量两个框重合的程度，=1完全重合，&amp;gt;=0.5可接受的 非极大值抑制 防止一个物体被多次检验 首先去除$Pc$小于某个置信度的bounding box。然后 while true：找到当前的$Pc$最大的bounding box，去除所有与其IoU超过阈值的bounding box 如果有多种类物体待检验，则应该对每种类别单独进行一次非极大值抑制 如果一个bounding box内部有多个物品，则应该设置更小的bounding box Anchor-Boxes 让一个格检测出多个对象，需手动设置，或者kmeans自学习 2 YOLOv1 2.</description></item><item><title>Deeplearning introduction - Ⅰ</title><link>https://lunarwhite.github.io/posts/guides/dl-intro1/</link><pubDate>Thu, 24 Jun 2021 20:20:48 +0000</pubDate><guid>https://lunarwhite.github.io/posts/guides/dl-intro1/</guid><description>1 简介 1.1 一种定义 P（Performance）来评估计算机程序在某类任务T（Task）上的性能，若一个程序通过利用经验E（Experience）在T中任务上获得了性能改善，则我们就说关于T和P，该程序对E进行了学习 1.2 一种划分 分类Classification 输出值离散 e.g. 根据光谱的形状，分类为恒星、星系或者其它 回归Regression 输出连续值 e.g. 根据光谱的形状，估计恒星的温度 聚类Clustering 把相似的记录聚在一起，不需要标签 e.g. 对获得天体光谱聚类，相似的光谱被聚在同一组 1.3 三要素 数据、算法和模型 1.4 大致步骤 1 Define a Model 2 Goodness of Function 3 Pick the Best Function: Gradient decent 1.5 难点 调用算法得出了准确率？ 模型搭建过程以及评价指标算的是对的？ 模型选择，并且能说明模型选的合适？ 评价指标是不是符合真正的需求？ 训练集是否覆盖全面？ 数据里面有没有错误值、错误标签影响到了结果？ 获得的模型能真正用于实际应用？ 把过程进行清楚、有逻辑的表达，展示给别人？ 1.6 发展 深层网络训练中，梯度消失问题 方法：无监督预训练对权值进行初始化+有监督训练微调 ReLU激活函数被提出，能够有效的抑制梯度消失问题 Loss的局部极值问题 对于深层网络来说影响可以忽略 原因：深层网络虽然局部极值非常多，但是通过DL的BatchGradientDescent优化方法很难陷进去，而且就算陷进去，其局部极小值点与全局极小值点也是非常接近，但是浅层网络却不然，其拥有较少的局部极小值点，但是却很容易陷进去，且这些局部极小值点与全局极小值点相差较大 1.</description></item><item><title>COVID19 sentiment data analysis</title><link>https://lunarwhite.github.io/posts/assigns/ds-covid/</link><pubDate>Mon, 21 Jun 2021 11:12:00 +0000</pubDate><guid>https://lunarwhite.github.io/posts/assigns/ds-covid/</guid><description>本项目为数据结构课程设计的设计&amp;amp;开发文档
代码仓库在这里
1 引言 1.1 编写目的 公众情绪一直复杂多元，随着信息化程度的提高与大数据、人工智能等技术的不断普及又得以放大，让更多人的情感和想法得以在网络上得到表达与传播，传播范围比以往更大。新冠疫情于去年一月开始爆发，转眼间已经过去了一年多，疫情在国内得到了有效的控制。回顾这个过程，疫情下形成了特殊的网络社会心态和公众情绪。多元复杂的公众情绪，借助网络的力量传播和放大。但也方便了收集数据，并研究情绪变化的具体过程。
因此基于此次疫情，借助适宜的数据、分析手段和自然语言处理技术，希望在一定程度上了解新冠疫情这一特殊事件，在其自身不同发展阶段对中国大众心态的影响，以大数据技术研究中国大众的网络社会心态及其变化规律，进而形成引导公众情绪、维护社会稳定的参考性依据，或许有助于未来的类似事件的应对。
1.2 项目概述 以微博为代表的社交媒体上广泛的传播各种疫情信息，在疫情阶段发挥着比较重要的信息传输作用。本次作业的目的就是深入分析疫情信息中蕴含的网民情绪及其变化情况。以新冠肺炎疫情相关的短微博和相关新闻下的评论作为主要研究对象，首先爬取大量数据，利用心态词典方法可以大致观察心态演变，并结合层次聚类法从中分析网民关注热点，最后通过可视化方法展现相应的结果。
1.3 可行性分析 1）市场可行性：有助于平台运营人员乃至普通群众以可视化这种友好的交互方式分析、及时准确把握舆情变化，和不同阶段大众心态的影响。进而便于引导公众情绪、维护社会稳定，并对未来的类似突发事件的应对产生参考性意义。
2）技术可行性：数据源、数据量的支持，爬虫技术的成熟，机器学习尤其是自然语言处理方向发展如火如荼，文本情感分析技术趋于成熟，Python 有大量的可视化分析的第三方库，如pyecharts、matplotlib等。
1.4 术语和缩略语 [1] 聚类分析：聚类分析（英语：Cluster analysis）亦称为群集分析，是对于统计数据分析的一门技术，在许多领域受到广泛应用，包括机器学习，数据挖掘，模式识别，图像分析以及生物信息。聚类是把相似的对象通过静态分类的方法分成不同的组别或者更多的子集（subset），这样让在同一个子集中的成员对象都有相似的一些属性，常见的包括在坐标系中更加短的空间距离等。一般把数据聚类归纳为一种非监督式学习。
[2] 文本情感分析：文本情感分析（也称为意见挖掘）是指用自然语言处理、文本挖掘以及计算机语言学等方法来识别和提取原素材中的主观信息。通常来说，情感分析的目的是为了找出说话者/作者在某些话题上或者针对一个文本两极的观点的态度。这个态度或许是他或她的个人判断或是评估，也许是他当时的情感状态（就是说，作者在做出这个言论时的情绪状态），或是作者有意向的情感交流（就是作者想要读者所体验的情绪）。
[3] 文本分割：文本分割（Text segmentation）将书面文本分割成有意义单位的过程，如单词、句子或主题。这个术语既适用于人类阅读文本时的心理过程，也适用于在计算机中实现的人工过程，后者属于自然语言处理的领域。一些书面语言有明确的单词分界标记，例如英语的词之间有空格标识，阿拉伯语有独特的首、中、末字母形状，但这种标记不是所有书面语言都有。
[4] 停用词：在信息检索中，为节省存储空间和提高搜索效率，在自然语言处理数据（或文本）之前或之后会自动过滤掉某些字或词，这些字或词即被称为Stop Words(停用词)。不要把停用词与安全口令混淆。 这些停用词都是人工输入、非自动化生成的，生成后的停用词会形成一个停用词表。但是，并没有一个明确的停用词表能够适用于所有的工具。甚至有一些工具是明确地避免使用停用词来支持短语搜索的。
[5] 网络爬虫：网络爬虫（英语：web crawler），也叫网络蜘蛛（spider），是一种用来自动浏览万维网的网络机器人。其目的一般为编纂网络索引。 网络搜索引擎等站点通过爬虫软件更新自身的网站内容或其对其他网站的索引。网络爬虫可以将自己所访问的页面保存下来，以便搜索引擎事后生成索引供用户搜索。 爬虫访问网站的过程会消耗目标系统资源。不少网络系统并不默许爬虫工作。因此在访问大量页面时，爬虫需要考虑到规划、负载，还需要讲“礼貌”。 不愿意被爬虫访问、被爬虫主人知晓的公开站点可以使用 robots.txt 文件之类的方法避免访问。这个文件可以要求机器人只对网站的一部分进行索引，或完全不作处理。
1.5 参考资料 [1] Scrapy Tutorial https://docs.scrapy.org/en/latest/intro/tutorial.html
[2] Matplotlib Tutorial https://matplotlib.org/stable/tutorials/index.html
[3] Documenation of scikit-learn 0.19.1 https://sklearn.org/documentation.html
[4] scikit-learn (sklearn) 官方文档中文版 https://sklearn.apachecn.org
[5] HanLP: Han Language Processing https://hanlp.hankcs.com/docs/
[6] Natural Language Toolkit 3.</description></item><item><title>Classify food images using CNN with Keras</title><link>https://lunarwhite.github.io/posts/assigns/dl-food-classify/</link><pubDate>Thu, 03 Jun 2021 11:38:49 +0000</pubDate><guid>https://lunarwhite.github.io/posts/assigns/dl-food-classify/</guid><description># to be continue: # 1. resize smaller # 2. 归一化 # 3. 期望acc 40-70% import os import cv2 import matplotlib.pyplot as plt import keras from keras_preprocessing.image import ImageDataGenerator from keras.models import Sequential from keras.layers import * from keras.optimizers import * from keras.utils import plot_model workspace_dir = &amp;#39;../res/food-11&amp;#39; os.environ[&amp;#39;TF_CPP_MIN_LOG_LEVEL&amp;#39;] = &amp;#39;2&amp;#39; # init args image_dim = 128 model_loss = &amp;#39;categorical_crossentropy&amp;#39; model_optimizer = Adam() model_batch_size = 128 model_dropout = 0.2 model_epoch = 50 # 1 加载数据 def load_data(path, label): # label标记需不需要传y值：训练集和验证集需要y值-true，测试集不需要-false # listdir得到该路径下所有图片，sorted用于排序 image_dir = sorted(os.</description></item><item><title>Tiny zhihu-like web - deploy doc</title><link>https://lunarwhite.github.io/posts/assigns/db-tiny-zh2/</link><pubDate>Tue, 01 Jun 2021 11:12:00 +0000</pubDate><guid>https://lunarwhite.github.io/posts/assigns/db-tiny-zh2/</guid><description>本项目为数据库课程设计的开发文档
设计文档在这里，代码仓库在这里
欢迎交流拍砖~
1 云服务器 1.1 连接 服务器信息 操作系统：Ubuntu Server 18.04 LTS 配置：标准型S5/1核/2GB/1Mbps 系统盘：高效云硬盘/50GB 1.2 域名 备案 ID证、地址、手机号、Email 解析 管理： 解析控制台 二级域名：blog / demo / &amp;hellip; 端口 管理：配置安全组 SSL 支持二级、三级域名，同一主域最多20张免费证书 有效期一年，到期后需要重新申请并安装 TrustAsia TLS RSA CA证书（年限：1年） 管理：证书管理控制台 域名验证方式：DNS 验证 SSL部署 官方文档：Nginx 服务器 SSL 证书安装部署 下载证书，解压之后选择Nginx文件夹，重命名为cert .crt文件：是证书文件，crt是pem文件的扩展名 .key文件：证书的私钥文件 在Nginx的安装目录下创建cert目录，将本地证书文件和密钥文件上传 sudo mkdir /etc/nginx/cert sudo chmod 777 /etc/nginx/cert sudo scp -r 1_lunarwhite.</description></item><item><title>Tiny zhihu-like web - design doc</title><link>https://lunarwhite.github.io/posts/assigns/db-tiny-zh1/</link><pubDate>Mon, 03 May 2021 11:38:49 +0000</pubDate><guid>https://lunarwhite.github.io/posts/assigns/db-tiny-zh1/</guid><description>本项目为数据库课程设计的设计文档
开发文档在这里，代码仓库在这里
欢迎交流拍砖~
1 选题说明及需求介绍 1.1 选题说明 主要针对数据库编程的设计和实现。选择设计实现一个仿 「知乎」问答社区系统。今年三月，成立十周年的知乎在美国纽约交易所隆重上市。 知乎十年以来，知乎使用过的标语有：“认真你就赢了”、“我们 都是有问题的人”、“有问题，上知乎”和“有问题，就会有答案”等。可见，问题与答案是知乎的灵魂、是知乎的运营标准和产品定位。 1.2 需求介绍 知乎是知名的中文问答社区，连接各行各业的用户。人们普遍认为它是中文版的 Quora，高质量中文知识社区。用户分享着彼此的知识、经验和见 解，为中文互联网源源不断地提供多种多样的信息。准确地讲，知乎更像一个论坛：用户围绕着某一感兴趣的话题进行相关的讨论，同时可以关注兴趣一致 的人。对于概念性的解释，网络百科几乎涵盖了你所有的疑问；但是对于发散思维的整合，却是知乎的一大特色。 用户通过搜索、浏览其他用户的问题的回答，解决自己的一些问题，同时可以发布问题与回答，进行友好交流；同时，可以点赞你认可的回答与提问、关注用户，实现简易的社交功能。对于管理员可以进行内容审核，对论坛中一些不合法的信息进行删除，甚至可以封禁用户；对于积极输出某一专业知识领域的优质内容的友善用户，授予「优秀回答者」荣誉称号，鼓励用户创作。 2 系统的功能模块划分 2.1 需求分析 在该社区中已登录用户的操作： ①浏览，用户可以根据个人兴趣进行浏览，包括问题以及问题下面的回 答、回答下面的评论。 ②提问，用户可以对问题进行简单描述，发布，等待其他用户回答问 题。发布之后可以编辑、删除。 ③回答，用户可以针对问题发表自己的见解，分享经验。 ④点赞，用户可以对喜欢的回答进行点赞、推荐，让更多的人看到。 ⑤关注，用户可以对自己感兴趣的人进行关注、对感兴趣的问题关注。 ⑥收藏，用户可以创建和删除收藏夹，收藏回答，方便下次阅读。 ⑦个人主页，用户拥有自己主页和个人资料，可以查看自己发布和收藏。 ⑧删除，用户只有权对自己发布的问题、回答进行删除。 ⑨搜索，用户通过输入关键字进行搜索，返回相关问题、回答以及用户。 在该社区中管理员的操作： ①对发表的不合法的提问、回答和评论进行删除。 ②对发表不合法信息的用户进行禁言甚至删除。 ③内容审核，编辑问题或删除问题、回答。 ④对于积极输出优质内容的用户授予「优秀回答者」荣誉称号。 未注册的临时用户的操作： ①浏览，用户可以根据个人兴趣进行浏览，包括问题以及问题下面的回 答、回答下面的评论。 ②搜索，用户通过输入关键字进行搜索，返回相关问题、回答以及用 户。 2.2 模块划分 整体功能模块图 2.3 数据流图 顶层数据流图 一层数据流图-临时用户 一层数据流图-注册用户 一层数据流图-平台管理员 2.</description></item><item><title>HPC - CUDA</title><link>https://lunarwhite.github.io/posts/guides/hpc-cuda/</link><pubDate>Sun, 02 May 2021 11:38:49 +0000</pubDate><guid>https://lunarwhite.github.io/posts/guides/hpc-cuda/</guid><description>1 初识与CUDA 1.0 基础概念 主机端-设备端（Host-Device） 内核函数（Kernel Function） 线程模型（Thread Model） 存储模型（Memory Model） 执行模型（CUDA Execution Model） GPU连接节点 ssh gpu01
1.1 kernel示例 __global__ void VecAdd(float* A, float* B, float* C){ int i = threadIdx.x; C[i] = A[i] + B[i]; } int main(){ VecAdd&amp;lt;&amp;lt;&amp;lt;1, N&amp;gt;&amp;gt;&amp;gt;(A, B, C); } 1.2 线程模型 __global__ void kernel(float* parameter); dim3 DimGrid(3, 2); //6 thread blocks dim3 DimBlock(16, 16); //256 threads per block kernel&amp;lt;&amp;lt;&amp;lt;DimGrid, DimBlock&amp;gt;&amp;gt;&amp;gt;(float* parameter) 1.</description></item><item><title>HPC - OpenMP</title><link>https://lunarwhite.github.io/posts/guides/hpc-openmp/</link><pubDate>Fri, 30 Apr 2021 19:18:01 +0000</pubDate><guid>https://lunarwhite.github.io/posts/guides/hpc-openmp/</guid><description>1 初识与OpenMP 1.1 OpenMP基本结构 #include &amp;lt;stdlib.h&amp;gt;#include &amp;lt;omp.h&amp;gt;#include &amp;lt;stdio.h&amp;gt;#define NUM_THREADS 8 //设置线程数目为8 int main(){ //--串行区，由一个初始线程执行 static long num_steps=1000000000; double step; int i; double x,pi,sum=0.0; step=1.0/(double) num_steps; //调用运行时库函数，为后面的并行区设置线程数目 omp_set_num_threads(NUM_THREADS); //编译指导语句，创建一个并行区。在该并行区中多线程执行 #pragma omp parallel for reduction(+:sum) private(x) //--并行区，该区域由8个线程并行执行 for(i=0;i&amp;lt;num_steps;i++){ x=(i+0.5)*step; sum+=4.0/(1.0+x*x); } //--串行区，只有一个主线程执行 pi=step*sum; printf(&amp;#34;Pi=%21.20f(%ld steps)\n&amp;#34;,pi,num_steps); return 0; } icc -openmp -o 3-1 3-1.c ./3-1 1.2 循环并行化 #include &amp;lt;stdlib.h&amp;gt;#include &amp;lt;omp.h&amp;gt;#include &amp;lt;stdio.h&amp;gt;#define NUM_THREADS 8 //设置线程数目为8 #define N 100 int main(){ //--串行区，由一个初始线程执行 int i; int x[N]; int y[N]; int z[N]; //初始化x[i] y[i] for(i=0; i&amp;lt;N; i++){ x[i]=i; y[i]=i*i; } //调用运行时库函数，为后面的并行区设置线程数目 omp_set_num_threads(NUM_THREADS); //编译指导语句，创建一个并行区。在该并行区中多线程执行 #pragma omp parallel for for(i=0; i&amp;lt;N; i++){ //--并行区，该区域由8个线程并行执行 z[i] = x[i]+y[i]; } //--串行区，只有一个主线程执行 for(i=0; i&amp;lt;N; i++){ printf(&amp;#34;z[%d]=x[%d]+y[%d]=%d\n&amp;#34;, i, i, i, z[i]); } return 0; } icc -openmp -o 3-2-2 3-2.</description></item><item><title> Available GPU server in SDU</title><link>https://lunarwhite.github.io/posts/devtools/sdu-gpu/</link><pubDate>Sat, 24 Apr 2021 20:20:48 +0000</pubDate><guid>https://lunarwhite.github.io/posts/devtools/sdu-gpu/</guid><description>1 配置 1.1 注意 释放显存：手动重启jupyter/重启kernel 工作目录：/home/ubuntu/work 1.2 环境 操作系统：Ubuntu 框架：pytorch-gpu/tensorflow-gpu，连接直接使用 1.3 连接-Jupyter 默认：12345678 1.4 连接-SSH ssh ubuntu@&amp;lt;address&amp;gt; -p &amp;lt;port&amp;gt; 端口：IP地址冒号后-10000 用户名：ubuntu 默认：123456 1.5 长期运行 Terminal：会持续显示输出信息，网页重开还可以持续显示输出 # 把jupyter文件copy成一个.py文件 jupyter nbconvert --to script *.ipynb # 执行文件 python *.py Notebook：网页关闭下次再打开就不再显示输出，程序还在运行但无法查看程序运行进展，而且只有重启kernel才能释放显存。 1.6 软件升级 系统 sudo apt-get update -y sudo apt-get upgrade -y 安装git sudo apt install git 1.7 空间清理 命令清理 # 定期观察磁盘占用情况 df -h # 清空回收站 sudo rm -rf ~/.</description></item><item><title>Deeplearning frameworks</title><link>https://lunarwhite.github.io/posts/guides/dl-frameworks/</link><pubDate>Sat, 24 Apr 2021 20:20:48 +0000</pubDate><guid>https://lunarwhite.github.io/posts/guides/dl-frameworks/</guid><description>1 SkLearn 1.1 参考 https://sklearn.apachecn.org/ https://scikit-learn.org/stable/user_guide.html 2 Keras 2.1 参考 https://keras.io/zh/ 2.2 损失函数 二分类 binary_crossentropy 多分类 categorical_crossentropy one-hot编码 sparse_categorical_crossentropy 数字编码 kullback_leibler_divergence hinge 多用于SVM categorical_hinge squared_hinge poisson 回归 mean_squared_error mean_absolute_error mean_absolute_percentage_error mean_squared_logarithmic_error logcosh cosine_proximity 2.3 优化方法 列表 SGD() RMSprop() Adagrad() Adadelta() Adam() Adamax() Nadam()</description></item><item><title>Logistic regression and validity analysis</title><link>https://lunarwhite.github.io/posts/assigns/dl-lr-va/</link><pubDate>Sat, 24 Apr 2021 11:38:49 +0000</pubDate><guid>https://lunarwhite.github.io/posts/assigns/dl-lr-va/</guid><description># 请用逻辑回归预测xtest对应的y值（梯度下降自己实现）。 # 并计算输出 accuracy，precision，recall，auc import numpy as np import matplotlib.pyplot as plt from sklearn.metrics import * xtrain = np.array([8., 3., 9., 7., 16., 05., 3., 10., 4., 6.]).reshape(-1, 1) ytrain = np.array([0, 0, 1, 0, 1, 0, 0, 1, 0, 0]).reshape(-1, 1) xtest = np.array([5., 4.5, 9.8, 8., 22., 17., 3., 19., 20, 30]).reshape(-1, 1) ytest = np.array([0, 0, 0, 1, 1, 1, 0, 1, 1, 1]).reshape(-1, 1) # init 超参数 b = 5 w = 1 lr = 0.</description></item><item><title> Available HPC server in SDU</title><link>https://lunarwhite.github.io/posts/devtools/sdu-hpc/</link><pubDate>Wed, 21 Apr 2021 20:20:48 +0000</pubDate><guid>https://lunarwhite.github.io/posts/devtools/sdu-hpc/</guid><description>1 配置 1.1 连接 ssh stu14@219.231.162.66 默认：a123456 1.2 系统信息 1个登录节点ln01 1个管理节点mu01 34个CPU节点cu01-cu34，队列名cu 2个GPU节点gpu01、gpu02，队列名gpu 2个mic节点mic01、mic02，队列名mic 1.3 环境变量 编辑配置文件 vi ~/.bashrc 写入环境变量 source /opt/intel/composer_xe_2015.1.133/bin/compilervars.sh intel64 source /opt/intel/impi/5.0.2.044/bin64/mpivars.sh source /opt/intel/mkl/bin/intel64/mklvars_intel64.sh 保存文件 :wq 后，使修改生效 source ~/.bashrc 同一账号修改一次即可，但最后一步生效命令都需要做 修改后，使用 which mpicc 命令检查是否完成环境变量配置 可以找到编译器路径，表明配置成功</description></item><item><title>Figure out the best aurgments using gradient descent - Ⅱ</title><link>https://lunarwhite.github.io/posts/assigns/dl-gd2/</link><pubDate>Sat, 17 Apr 2021 11:38:49 +0000</pubDate><guid>https://lunarwhite.github.io/posts/assigns/dl-gd2/</guid><description># 采用模型y=b+wx，试着用梯度下降算法求出最优参数 # 1.1 画出xdata，ydata的散点图 # 1.2 画出线性回归的函数图 # 2.1 画出b，w变化的图 # 1.在作业三基础上实现Adagrad # 2.在作业三基础上，画出损失函数随迭代次数的变化的图 import numpy as np import matplotlib.pyplot as plt # 给定 xdata, ydata, 都为 10 维长的数组 xdata = np.array([8., 3., 9., 7., 16., 05., 3., 10., 4., 6.]) ydata = np.array([30., 21., 35., 27., 42., 24., 10., 38., 22., 25.]) # init 超参数 b = 70 # 截距 w = 8 # 斜率 lr = 0.01 # 学习率 iteration = 10000 # 迭代次数 eps = 1e-10 # functions def cost(b, w, xdata, ydata): sum = 0 for i in range(0, len(xdata)): sum += (ydata[i] - (w * xdata[i] + b)) ** 2 return sum / (len(xdata) * 2) def GD(b, w, xdata, ydata, cache_b_w1): m = float(len(xdata)) loss = np.</description></item><item><title>Figure out the best aurgments using gradient descent - Ⅰ</title><link>https://lunarwhite.github.io/posts/assigns/dl-gd1/</link><pubDate>Sun, 11 Apr 2021 11:38:49 +0000</pubDate><guid>https://lunarwhite.github.io/posts/assigns/dl-gd1/</guid><description># 采用模型y=b+wx，试着用梯度下降算法求出最优参数 # 1.1 画出xdata，ydata的散点图 # 1.2 画出线性回归的函数图 # 2.1 画出b，w变化的图 import numpy as np import matplotlib.pyplot as plt # 给定 xdata, ydata, 都为 10 维长的数组 xdata = np.array([8., 3., 9., 7., 16., 05., 3., 10., 4., 6.]) ydata = np.array([30., 21., 35., 27., 42., 24., 10., 38., 22., 25.]) # init 超参数 b = 70 # 截距 w = 8 # 斜率 lr = 0.01 # 学习率 iteration = 1000 # 迭代次数 # functions def cost(b, w, xdata, ydata): sum = 0 for i in range(0, len(xdata)): sum += (ydata[i] - (w * xdata[i] + b)) ** 2 return sum / (len(xdata) * 2) def gradient_descent(b, w, xdata, ydata, lr, iteration, cache_b_w): m = float(len(xdata)) for item in range(iteration): b_grad = 0 w_grad = 0 for i in range(len(xdata)): b_grad += (w * xdata[i] + b) - ydata[i] w_grad += ((w * xdata[i] + b) - ydata[i]) * xdata[i] b_grad = b_grad / m w_grad = w_grad / m b = b - (lr * b_grad) w = w - (lr * w_grad) cache_b_w = np.</description></item><item><title>Fit cicada frequency and temperature using linear regression</title><link>https://lunarwhite.github.io/posts/assigns/dl-lr-cicada/</link><pubDate>Sat, 03 Apr 2021 11:38:49 +0000</pubDate><guid>https://lunarwhite.github.io/posts/assigns/dl-lr-cicada/</guid><description>import numpy as np import matplotlib.pyplot as plt from sklearn import linear_model from sklearn.metrics import mean_squared_error # dataset xtrain = [8., 3., 9., 7., 16., 5., 13., 10., 4., 6.] ytrain = [30., 21., 33., 27., 42., 24., 36., 33., 22., 25.] xtest = [4.5, 6, 14] ytest = [24, 25, 38] xtrain = np.array(xtrain).reshape(-1, 1) ytrain = np.array(ytrain).reshape(-1, 1) xtest = np.array(xtest).reshape(-1, 1) ytest = np.array(ytest).reshape(-1, 1) # 利用sklearn包中的linear_model.LinearRegression # （1）预测蝉每小时鸣叫次数和温度之间的函数关系 clf = linear_model.</description></item><item><title>HPC - MPI</title><link>https://lunarwhite.github.io/posts/guides/hpc-mpi/</link><pubDate>Fri, 02 Apr 2021 18:18:49 +0000</pubDate><guid>https://lunarwhite.github.io/posts/guides/hpc-mpi/</guid><description>1 初识与MPI 1.1 hello-world #include&amp;#34;mpi.h&amp;#34;#include&amp;lt;stdio.h&amp;gt;#include&amp;lt;math.h&amp;gt;void main(int argc, char *argv[]){ // 相关变量声明 int numprocs; int procnum; int namelen; char pro_name[MPI_MAX_PROCESSOR_NAME]; // 初始化MPI环境 MPI_Init(&amp;amp;argc, &amp;amp;argv); // MPI程序体 MPI_Comm_rank(MPI_COMM_WORLD, &amp;amp;procnum); MPI_Comm_size(MPI_COMM_WORLD, &amp;amp;numprocs); MPI_Get_processor_name(pro_name, &amp;amp;namelen); printf(&amp;#34;Hello World! Hello HPC! Processor %d of %d on %s \n&amp;#34;, procnum, numprocs, pro_name); // 退出MPI环境 MPI_Finalize(); } // MPI并行程序的编译 mpicc -o 1-1 1-1.c // MPI程序运行，-np 或 -n 用来指定运行程序的进程数目 mpirun -np 4 1-1 1.2 简单的发送和接收 进程0向进程1发送一个整数，进程接收到后，将其打印到屏幕 #include&amp;lt;stdio.</description></item><item><title>Huffman encoding and decoding using Python and PyQt</title><link>https://lunarwhite.github.io/posts/assigns/ds-gui-huffman/</link><pubDate>Fri, 26 Mar 2021 20:50:38 +0000</pubDate><guid>https://lunarwhite.github.io/posts/assigns/ds-gui-huffman/</guid><description>1 要求 1.1 简介 初始化 (Initialization)：从终端读入n个字符，建立哈夫曼树； 编码 (Coding)：利用已建好的哈夫曼树，对字符进行编码，然后将正文编码结果存入文件codefile中； 译码 (Decoding)：利用已建好的哈夫曼树将文件codefile中的代码进行译码，结果存入文件textfile中。 1.2 思路 （待写 2 实现 2.1 环境 Python3.8.5 PyQt5.15.4 PyCharm2020.3.3 2.2 代码 import os import sys from PyQt5 import QtCore, QtWidgets, QtGui from PyQt5.QtWidgets import QMessageBox path = os.getcwd() encoder = {} decoder = {} class Ui_MainWindow(object): def setupUi(self, MainWindow): MainWindow.setObjectName(&amp;#34;MainWindow&amp;#34;) MainWindow.resize(495, 328) self.centralwidget = QtWidgets.QWidget(MainWindow) self.centralwidget.setObjectName(&amp;#34;centralwidget&amp;#34;) self.textEdit = QtWidgets.QTextEdit(self.centralwidget) self.textEdit.setGeometry(QtCore.QRect(10, 10, 341, 291)) self.</description></item><item><title>Exploration and thinking on university education @Jinming Hu</title><link>https://lunarwhite.github.io/posts/thoughts/thoughts-about-edu/</link><pubDate>Wed, 17 Mar 2021 16:51:23 +0000</pubDate><guid>https://lunarwhite.github.io/posts/thoughts/thoughts-about-edu/</guid><description>原文链接
1 培养兴趣 学习并不是一件暂时的事情，不是到某个时候就可以停止了，而往往是一个终身的学习过程。而要保持这种终身学习的态度，首当其中的就是要保持对学习兴趣与热情。在我看来，学习可以而且应该是一件非常有趣的事情。
然而，现在的大学课程教育很多时候无聊又无用，大大消磨了学生们对于学习的兴趣与热情，认为学习就是这么痛苦而且困难的。一些老师拿着一套十年不改的课件，站上讲台就开始“自说自话”，丝毫不管下面学生的反应。更不必说这些课程的内容设计与教材往往颇具“中国特色”，都是什么xx计划xx规划的教材，而这些教材往往粗制滥造，不知所云，让学生们学得摸不着头脑，只以为是自己智商不够而受挫。最后，课程的评估再来个什么“分数正态分布”，什么“按排名给分数”，什么“字数越多分越高”，大大加剧学生们的内卷。看到我们聪明又努力的学生因为这些可笑的原因而把学习的热情与精力消磨在这些没什么意义的事情上，真令人痛心疾首！
2 认识自己 希腊德尔菲的阿波罗神庙里，刻着三句箴言，其中一句是“认识你自己”。所谓认识自己，在我看来包括：知道自己是一个什么样的人，知道自己的优点是什么、弱点是什么，知道自己想成为一个什么样的人，知道自己内心的渴望。
人生就像是在做数学中的优化一样，最重要的是找到自己的优化目标和约束条件，然后才能在满足约束条件的前提下去优化自己的目标。所谓的优化目标，就是自己内心的渴望，自己真正想奉献一生的事情；所谓约束条件，就是自己必须要满足的前提目标
而现在的大学教育，我似乎完全看不到对认识自己的强调，而同学们（包括我自己）也往往是有些麻木地顺着前人“成功”的轨迹，按部就班地刷着GPA、找着实习、去追求一份世俗意义上“成功”的工作；抑或是去找研究实习，去发表论文然后去读博士。有多少人是真正思考自己人生的目标，真正思考过自己是什么样的人的呢？又有多少学校与老师会去告诉学生认识自己的重要性呢？
在这里，我想告诉大家，认识自己是一件我们应该贯穿一生的事情。许多问题的答案，也许我们暂时还没法回答。但请大家将这些问题铭记于心。也许在将来的某时某刻，随着知识与实践的增加，我们会逐渐开始知道这些问题的答案；而也许这些答案，又会在将来的某时某刻被修正。这并不要紧，只要我们一直在保持着对认识自己的渴望，那就够了。
3 总结原因 为什么现在的课程质量不高呢？是不是老师的水平有差距呢？根据我的亲身实践，我认为最影响授课水平的，应该还是对授课的重视程度与备课情况。许多老师根本不认真备课，上课就只是应付学校的教学任务，那授课水平怎么可能高呢？
那为什么会是这样的情况呢？既然美国的大学课程的教学水平在我们之上，我们不妨来看看美国的情况，看看会有什么启发。实际上，在美国，无论是申请教职，还是申请终身教职（tenure），其中有很重要的一项就是teaching statement，即教学能力。绝大多数美国博士找教职的时候，都会给出自己当助教（TA）时的履历证明，而如果自己获得了什么“最受欢迎TA”荣誉的话，则会是找教职的一个很大的加分项。而所有助理教授(AP)几乎都需要承担教学任务，并且学生们会给AP的教学情况打分，学生的反馈的好坏极大程度上会影响AP升终身教职的成功与否，而教学能力较差的AP有时甚至会被一票否决。在这种情况下，美国大学的教授们一定会花大精力去提升自己的授课质量，因为事关自己的饭碗。
那中国的情况是什么呢？别说重要与否了，教学质量甚至不是教职评价体系中的一部分，而学校看重的只有经费、论文等等。同样的理由也适用于国内的研究生培养情况。研究生培养得究竟如何，很多导师根本不关心。学校和很多导师关心的只是这些研究生能带来多少论文，能做多少经费的项目等等&amp;hellip;&amp;hellip;在这种情况下，我们怎么能指望中国大学能提供好的课程与好的研究生指导资源呢？
4 未来展望 实际上，这几年来许多年轻的老师（尤其是一些从美国回来的老师）已开始登上中国大学教育的舞台，并开始努力贡献高质量的课程了。这是令人欣喜的变化，而且我相信这只是变化的开端。
今天走在杭州的小路上，注意到路边的小树都已吐露新芽，甚至许多已经开出美丽的花朵。虽然还没到百花齐放的时节，但那种欣欣向荣的气息已在四处酝酿，只等时机一到，万紫千红的春天就会欢笑着来到。也许这正如中国的大学教育一般，虽然眼下还有诸多问题弊端，但光明的未来已经显示出她的预兆了。当然，这还需要很多人甚至是好几代人的努力，还需要我们这些有志青年的共同努力。教育的变化，不会自己发生，必须通过改变，通过人的努力。我因此想到，我们青年的责任真是重大，我们应该做的事情真多，要走的道路真长。</description></item><item><title>Chrome and Edge</title><link>https://lunarwhite.github.io/posts/devtools/chrome-edge/</link><pubDate>Sat, 20 Feb 2021 12:55:08 +0000</pubDate><guid>https://lunarwhite.github.io/posts/devtools/chrome-edge/</guid><description>1 快捷键 1.1 Edge 参考链接-support.microsoft.
1 Ctrl + D 将当前选项卡另存为收藏夹 Ctrl + Shift + D 在新文件夹中将所有打开的标签页另存为收藏夹 Ctrl + H 在新标签页中打开“历史记录”(Web UI) Ctrl + J 在新标签页中打开“下载”(Web UI) Ctrl + Shift + Y 打开集合 Ctrl + M 将当前标签页设为静音（切换） 2 Alt + 向左键 返回 Alt + 向右键 前进 Ctrl + Tab 切换到下一个标签页 Ctrl + Shift + Tab 切换到上一个标签页 Ctrl + 1~8 切换到特定标签页 Ctrl + 9 切换到最后一个标签页 Ctrl + N 打开新窗口 Ctrl + Shift + N 打开新的 InPrivate 窗口 Ctrl + T 打开新标签页并切换到该标签页 Ctrl + Shift + T 重新打开上一个关闭的标签页并切换到该标签页 Ctrl + R 重新加载当前页 Ctrl + Shift + R 重新加载当前页，忽略缓存内容 Ctrl + W 关闭当前标签页 Ctrl + Shift + W 关闭当前窗口 3 空格键 向下滚动网页，一次滚动一个屏幕 Shift + 空格键 向上滚动网页，一次滚动一个屏幕 PgDn 向下滚动网页，一次滚动一个屏幕 PgUp 向上滚动网页，一次滚动一个屏幕 Home 键 转到页面顶部，将键盘焦点移动到窗格的第一项 End 转到页面底部，将键盘焦点移动到窗格的最后一项 Ctrl + 0 重置缩放级别 4 Ctrl + Enter 将 www.</description></item><item><title>Fight the dragon with infinite fun @skyzh</title><link>https://lunarwhite.github.io/posts/thoughts/fight-dragon/</link><pubDate>Sun, 31 Jan 2021 23:50:52 +0000</pubDate><guid>https://lunarwhite.github.io/posts/thoughts/fight-dragon/</guid><description>原文链接
很高兴，这学期的表演能让诸位卷不赢躺不平的同学感到难过，不得不使用真才实学取得高分，这是我的目的之一。
1 乱象 贵系一些同学，一边幻想着大作业要求能低一点，一边又用实际行动向老师证明大作业太简单。40 页报告，造火箭的实验内容，实在令我叹为观止。一些人认为，我在群里口嗨导致了作业难度的提升。但不要忘了，任课老师永远是按照平均水平来布置作业的。各位的平均水平都如此之高，大作业怎么会简单呢（笑
还有一些同学，手段高超，通过给老师发邮件的方式来影响他人的分数。我自然是不在意那一二十分的，但我还是想问：你心安理得吗？
某些同学以为自己的造假水平能蒙骗过一个世纪没写过代码的教授。但不要忘了，优秀作业是会被所有同学参考学习的。我一看到某课程的几份优秀作业，就发现了端倪。四份优秀作业，两份抄袭，一份造假，不愧是你系的学生！(更可笑的是不下两位数的人“复现”出了作假的结果，我不是很懂。）
某位同学一看事情比较大，就匆忙删掉了自己的 repo。互联网是有记忆的，你可以在我的 GitHub 账号下的 HallOfShame 项目中找到这些记录。
躺不平的朋友们不要阴阳怪气了。虚构创作、煽动对立，不解决任何问题。
这个问题下面终于出现了一些交大匿名社区无可奉告里的转帖。很高兴，这学期的表演能让诸位卷不赢躺不平的同学感到难过，不得不使用真才实学取得高分，这是我的目的之一。事实上，给成绩的分布、多少人挂科，学校都是有要求的。不论我（或是别的同学）如何操作，这一比例都无法被轻易改变。从我理想主义的角度来说，我确实做到了打破长久以来“比谁的页数更多”的潜规则，断绝了一种初级的“内卷”方法。
2 缘由 第一件比较失望的事情大概是对课程设计的失望。
体系结构实验，实验做的东西和上课讲的东西根本不在一个频道上。不知道该怎么吐槽了。 操作系统实验，是魔改 Linux 内核。老师就给个完成的目标有几点几点，具体怎么改让同学“自行搜索”。 操作系统、计算机组成、体系结构三门课完全脱节，没有整体感。一学期能看到的汇编就有三种：8086 汇编、MIPS 汇编、x86 汇编。恐怕以正常同学的水平还得纠结到底是 mov dst, src 还是 MOV SRC, DST 吧。 3 自述 我的背景大家估计也比较清楚。大一下看完了 CS:APP，大一暑假依葫芦画瓢照着 CA:AQA 写了 Tomasulo + Speculation 的 RISC-V 模拟器。大二上跟着 6.828 写了 xv6-riscv 的多个 lab，粗略读完了 OSTEP，之后的寒假用 Rust 实现了半个 xv6。总之，在大二下到来之前，我所学的内容基本上已经覆盖了这一学期的专业课：操作系统（+实验）、计算机组成、计算机体系结构（+实验）。
三月份，我从所在的实验室主动退出。原因不想展开，我在某些地方也记录过。我的同学人均在实验室打工，而我半年什么也没干。总之，我陷入了是否要做科研的迷茫之中。硅胶的宣传和教育让我觉得不做科研就是失败的，CS 同学就应该直博 PhD 做学术贡献。
好在之后在 T..V 社区里遇见了几位很有趣的人，让我发现人生不只是学校所宣传的那几种方式。我们还有很多路可以走。在这个时间段，我坚定了做开源软件的想法，它是我的人生追求之一（但不一定是职业道路）。在之后的许多项目里，我都带入了 T..V 社区里学到的一些习惯。开源不仅是代码开源，整个协作流程（这些代码是基于什么考虑写出来的？）、文档、工具链，都应当能直接访问。渐渐认识到了自己在学校的层面上是彻底的失败，找到失败者能享受的生活方式，大概是我比较幸运的地方。
4 总结 一些人喷我没提出建议改变现状。我评教的时候每门课都写了至少 300 字。恐怕你评教的时候也只会写“感谢xx老师，xx老师上课真好”这样的话吧。</description></item><item><title>File word retrieval and statistics using Python</title><link>https://lunarwhite.github.io/posts/assigns/ds-word-stat/</link><pubDate>Sat, 19 Dec 2020 19:48:51 +0000</pubDate><guid>https://lunarwhite.github.io/posts/assigns/ds-word-stat/</guid><description>1 要求 1.1 简介 给定一个文本文件，要求统计给定单词在文本中出现的总次数，并检索输出某个单词出现在文本中的行号、在该行中出现的次数以及位置。
1.2思路 可以分为主控菜单程序和另外三个部分实现：
零、主控菜单程序 (1) 头文件包含 (2) 菜单选项包括 建立文件 单词计数 单词定位 退出程序 (3) 选择1-4执行相应的操作，其他字符为非法 一、建立一个文本文件，文件名由用户用键盘输入 实现过程 (1) 定义一个串变量 (2) 定义文本文件 (3) 输入文件名，打开该文件 (4) 循环读入文本行，写入文本文件 (5) 关闭文件 二、给定单词计数，输入一个不含空格的单词，统计输出该单词在文本中的出现次数 实现设计 要用到模式匹配算法，逐行扫描文本文件。匹配一个，计数器加1，直到整个文件扫描结束；然后输出单词出现的次数 朴素模式匹配算法的基本思路是将给定字串与主串从第一个字符开始比较，找到首次与子串完全匹配的子串为止，并记住该位置。 但为了实现统计子串出现的个数，不仅需要从主串的第一个字符位置开始比较，而且需要从主串的任一位置检索匹配字符串。 实现过程 (1) 输入要检索的文本文件名，打开相应的文件 (2) 输入要检索统计的单词 (3) 循环读文本文件，读入一行，将其送入定义好的串中，并求该串的实际长度，调用串匹配函数进行计数 (4) 关闭文件，输出统计结果 三、检索给定单词，输入一个单词，检索并输出该单词所在的行号、该行中出现的次数以及在该行中的相应位置。 实现设计 同上一个设计类似，但是要相对复杂一些 实现过程 (1) 输入要检索的文本文件名，打开相应的文件 (2) 输入要检索统计的单词 (3) 循环读文本文件，读入一行，将其送入定义好的串中，并求该串的实际长度。行计数器置初值0，调用串匹配函数进行计数。如果 行单词计数器!</description></item><item><title>How to interview a person for two years @mindhacks</title><link>https://lunarwhite.github.io/posts/thoughts/two-years-interview/</link><pubDate>Mon, 16 Nov 2020 23:07:58 +0000</pubDate><guid>https://lunarwhite.github.io/posts/thoughts/two-years-interview/</guid><description>原文链接
书单+GitHub，就相当于一个两年左右的面试。没有什么面试比持续两年的面试更具有信息量。你提前两年就开始面试和培养未来的候选者，而且还不需要你花出一分精力，而且人家还很乐意，没有比这更完美的面试了。
1 痛点 最好的人也许不投简历，就决定去哪里了。所以要在他们做决定前找到他们。
比较差的会投很多次简历，找不到工作的时间越多，投的简历越多，给整个pool 带来很多噪音，top10%的简历也许根本不算全部人的top10%。
现在绝大多数应届简历而言，也许最具信息量的部分不是“精通XXX，熟悉YYY，掌握ZZZ”，不是“在UUU实习过”，也不是这个项目那个作业，反倒是越来越被认为不重要的一项：毕业学校。
毕业学校本不应该是最具信息量的，它之所以最具信息量只是源于一个悲剧的事实：简历上其他条目实在信息量太少了。所以靠谱的面试者往往学会了无视简历上华而不实的内容，只相信面试的时候亲眼所见，扫两眼简历也就罢了，最后还得自己捋起袖子慢慢面。
2 Book-List 我一向认为，很多时候，是否好好看完一本好书，对一个人的提升往往能达到质的区别。就算不好好看完一本好书，马马虎虎看完，只要书是真的好书，也肯定会有很大的提高。
我在面试的时候就经常询问对方看过哪些技术书籍，经常上哪些网站，订哪些博客。这里头尤其数书籍这一项的区分度最高。
我们姑且把这个计划叫做“书单计划”，容易看到“书单计划”具备以下几个卓越的优点：
清晰、明确。完全可度量。 防伪：读没读过，随便一问便知。 不在乎是否“泄题”：书单完全公开的，无所谓，本来就是要你去读的。想背题？背书吧。真能背下来说明认真看了。 管你用心不用心读，只要读了，读完了，就有区别。真正的好书，你想不被吸引都难。据我观察很多人就是不知道该去读什么书。 不存在“怎么做”的障碍：所有人都知道怎么读书——一页一页读。 不需要招聘者投入精力：书单在此，就这么简单，您看着办。 评估的负担很大程度转移到了应聘者的身上：是不是认真看完了，有没有心得体会，您自己掂量。没看完别来找我们。 “书单计划”能很大程度上起到强鉴别器的作用，看了就是看了，必然能学到东西，没看就是没看。知道和不知道，区别是本质的。
当然，“书单计划”的背后是另一个悲剧的现实，如果不是因为这个现实，这个计划也完全没有必要，那就是，中国IT大学教育当中要求要学的书，和企业真正需要你去读的书相比，不是完全不够用，就是写的不够好，或者更悲剧的就是根本用不上，所以在这个大背景下出来的牛人都是自己淘书自己学的。
微软高级开发测试工程师，《Windows用户态程序高效排错》作者熊力就在微博上说过：“我当年毕业的时候总结了一个公式：第一份工作的月薪=大学四年买过的技术书籍价格的总和。”
3 GitHub 可问题是，面试的人又怎么来评估呢？这不又回到了没法有效评估的怪圈了吗？答案很简单，但这个答案，直到最近几年，才真正成为现实——Github
GitHub诞生于08年春天，第一年便产生了4万6千个公共项目，大约一年半之后用户就已经达到10万用户之巨。而到今年九月份，GitHub已经迎来了百万级用户。Host超过两百万个项目。
增长的太快了！就像Twitter一样。这样疯了一般的增长只能说明一个事实——人们等待这个产品太久了。
真实的项目，真实的流程，真实的人名，一切代码review, check-in, test, build, document, 甚至讨论，计划，brianstorming，流程，一切的一切，都是项目历史的一部分，都可以像棋局那样复盘。有经验的面试者只要稍稍扫两眼一个人的GitHub历史，挑出几个check-in历史看一看，便完全能够迅速判断这个人是否满足他的要求。不再需要费劲心机地去想题目，去观察，去揣测，去花费大量的时间的同时还只能采样到几个极为有限的点。
不像象牙塔里面大作业，这里有源代码管理系统，自动化build，有check-in，有review，有分工，有合作，最重要的是——这是一个集市，一个超出象牙塔的集市，牛人相互吸引，你可以在互联网上找到和自己拥有共同兴趣的一帮人，真正做起一点事情，而不是交差，不需要受限于几十个人的一个小班级。
仔细想想，这是必然的趋势，没有比这个再合理的事情了，既然StackOverflow的历史能够作为简历，GitHub的历史不本该就是更好的简历吗：你想要具有实战经验，懂check-in懂review懂test和代码质量的重要性，懂交流和沟通的重要性，你本就应该在一个真实的项目当中去锻炼这些东西，而这些在目前已经完全可以办到。
“GitHub计划”同样有一些明显的、甚至不可替代的优点：
清晰、明确，完全可度量。 防伪：同样不担心“泄题”。你伪造不了GitHub历史，伪造不了check-in历史，review comments，文档，交流记录… 它不但是招聘，也是不花精力的培养。善哉善哉。 评估的责任很大程度上交给了应聘者自己。</description></item><item><title>MySQL</title><link>https://lunarwhite.github.io/posts/guides/mysql/</link><pubDate>Thu, 05 Nov 2020 17:08:43 +0000</pubDate><guid>https://lunarwhite.github.io/posts/guides/mysql/</guid><description>1 常用命令 #start net start mysql #stop net stop mysql 2 测试脚本 新建 studentdb.sql 如下 /* Source Host : localhost:3306 Source Database : studentdb Target Server Type : MYSQL Target Server Version : 50642 File Encoding : 65001 */ SET FOREIGN_KEY_CHECKS=0; -- ---------------------------- -- Table structure for `stuscore` -- ---------------------------- DROP TABLE IF EXISTS `stuscore`; CREATE TABLE `stuscore` ( `id` varchar(6) NOT NULL, `name` varchar(8) DEFAULT NULL, `gender` varchar(2) DEFAULT NULL, `score` int(3) DEFAULT NULL, PRIMARY KEY (`id`) ) ENGINE=InnoDB DEFAULT CHARSET=utf8; -- ---------------------------- -- Records of stuscore -- ---------------------------- INSERT INTO `stuscore` VALUES (&amp;#39;600001&amp;#39;, &amp;#39;宋皓宇&amp;#39;, &amp;#39;男&amp;#39;, &amp;#39;71&amp;#39;); INSERT INTO `stuscore` VALUES (&amp;#39;620395&amp;#39;, &amp;#39;张一弛&amp;#39;, &amp;#39;男&amp;#39;, &amp;#39;88&amp;#39;); INSERT INTO `stuscore` VALUES (&amp;#39;800001&amp;#39;, &amp;#39;贺楠苏&amp;#39;, &amp;#39;男&amp;#39;, &amp;#39;86&amp;#39;); INSERT INTO `stuscore` VALUES (&amp;#39;800002&amp;#39;, &amp;#39;张梓煜&amp;#39;, &amp;#39;男&amp;#39;, &amp;#39;83&amp;#39;); INSERT INTO `stuscore` VALUES (&amp;#39;800003&amp;#39;, &amp;#39;徐坤&amp;#39;, &amp;#39;男&amp;#39;, &amp;#39;76&amp;#39;); INSERT INTO `stuscore` VALUES (&amp;#39;800004&amp;#39;, &amp;#39;王茂赟&amp;#39;, &amp;#39;男&amp;#39;, &amp;#39;65&amp;#39;); INSERT INTO `stuscore` VALUES (&amp;#39;800005&amp;#39;, &amp;#39;卢爽&amp;#39;, &amp;#39;女&amp;#39;, &amp;#39;67&amp;#39;); INSERT INTO `stuscore` VALUES (&amp;#39;800007&amp;#39;, &amp;#39;李长烨&amp;#39;, &amp;#39;男&amp;#39;, &amp;#39;55&amp;#39;); INSERT INTO `stuscore` VALUES (&amp;#39;800008&amp;#39;, &amp;#39;马馨竹&amp;#39;, &amp;#39;女&amp;#39;, &amp;#39;98&amp;#39;); INSERT INTO `stuscore` VALUES (&amp;#39;800009&amp;#39;, &amp;#39;王梓铭&amp;#39;, &amp;#39;男&amp;#39;, &amp;#39;92&amp;#39;); INSERT INTO `stuscore` VALUES (&amp;#39;800010&amp;#39;, &amp;#39;孙健恺&amp;#39;, &amp;#39;男&amp;#39;, &amp;#39;100&amp;#39;); INSERT INTO `stuscore` VALUES (&amp;#39;800011&amp;#39;, &amp;#39;赵雨萱&amp;#39;, &amp;#39;女&amp;#39;, &amp;#39;33&amp;#39;); INSERT INTO `stuscore` VALUES (&amp;#39;800012&amp;#39;, &amp;#39;李明睿&amp;#39;, &amp;#39;男&amp;#39;, &amp;#39;56&amp;#39;); INSERT INTO `stuscore` VALUES (&amp;#39;800013&amp;#39;, &amp;#39;程云杨&amp;#39;, &amp;#39;男&amp;#39;, &amp;#39;79&amp;#39;); INSERT INTO `stuscore` VALUES (&amp;#39;800014&amp;#39;, &amp;#39;李可欣&amp;#39;, &amp;#39;女&amp;#39;, &amp;#39;83&amp;#39;); INSERT INTO `stuscore` VALUES (&amp;#39;800015&amp;#39;, &amp;#39;李闻天&amp;#39;, &amp;#39;男&amp;#39;, &amp;#39;78&amp;#39;); INSERT INTO `stuscore` VALUES (&amp;#39;800016&amp;#39;, &amp;#39;何朝旭&amp;#39;, &amp;#39;男&amp;#39;, &amp;#39;88&amp;#39;); INSERT INTO `stuscore` VALUES (&amp;#39;800017&amp;#39;, &amp;#39;杨章驰&amp;#39;, &amp;#39;男&amp;#39;, &amp;#39;89&amp;#39;); INSERT INTO `stuscore` VALUES (&amp;#39;800018&amp;#39;, &amp;#39;张浩阳&amp;#39;, &amp;#39;男&amp;#39;, &amp;#39;83&amp;#39;); INSERT INTO `stuscore` VALUES (&amp;#39;800019&amp;#39;, &amp;#39;尹丹彤&amp;#39;, &amp;#39;女&amp;#39;, &amp;#39;76&amp;#39;); INSERT INTO `stuscore` VALUES (&amp;#39;800020&amp;#39;, &amp;#39;孟鸽&amp;#39;, &amp;#39;女&amp;#39;, &amp;#39;91&amp;#39;); INSERT INTO `stuscore` VALUES (&amp;#39;800021&amp;#39;, &amp;#39;吴昌鸿&amp;#39;, &amp;#39;男&amp;#39;, &amp;#39;82&amp;#39;); INSERT INTO `stuscore` VALUES (&amp;#39;800022&amp;#39;, &amp;#39;耿嘉辉&amp;#39;, &amp;#39;男&amp;#39;, &amp;#39;70&amp;#39;); INSERT INTO `stuscore` VALUES (&amp;#39;800023&amp;#39;, &amp;#39;梁鹤飞&amp;#39;, &amp;#39;男&amp;#39;, &amp;#39;64&amp;#39;); INSERT INTO `stuscore` VALUES (&amp;#39;800024&amp;#39;, &amp;#39;李腾飞&amp;#39;, &amp;#39;男&amp;#39;, &amp;#39;55&amp;#39;); INSERT INTO `stuscore` VALUES (&amp;#39;800025&amp;#39;, &amp;#39;张岩&amp;#39;, &amp;#39;女&amp;#39;, &amp;#39;61&amp;#39;); INSERT INTO `stuscore` VALUES (&amp;#39;800026&amp;#39;, &amp;#39;曾永泽&amp;#39;, &amp;#39;男&amp;#39;, &amp;#39;78&amp;#39;); INSERT INTO `stuscore` VALUES (&amp;#39;800027&amp;#39;, &amp;#39;何毅辉&amp;#39;, &amp;#39;男&amp;#39;, &amp;#39;70&amp;#39;); INSERT INTO `stuscore` VALUES (&amp;#39;800028&amp;#39;, &amp;#39;庄伯语&amp;#39;, &amp;#39;男&amp;#39;, &amp;#39;59&amp;#39;); INSERT INTO `stuscore` VALUES (&amp;#39;800029&amp;#39;, &amp;#39;许艺帆&amp;#39;, &amp;#39;男&amp;#39;, &amp;#39;80&amp;#39;); INSERT INTO `stuscore` VALUES (&amp;#39;800030&amp;#39;, &amp;#39;赫明佳&amp;#39;, &amp;#39;女&amp;#39;, &amp;#39;47&amp;#39;); INSERT INTO `stuscore` VALUES (&amp;#39;800031&amp;#39;, &amp;#39;申亦轩&amp;#39;, &amp;#39;女&amp;#39;, &amp;#39;56&amp;#39;); INSERT INTO `stuscore` VALUES (&amp;#39;800610&amp;#39;, &amp;#39;袁立钊&amp;#39;, &amp;#39;男&amp;#39;, &amp;#39;79&amp;#39;); INSERT INTO `stuscore` VALUES (&amp;#39;810235&amp;#39;, &amp;#39;刘晓奇&amp;#39;, &amp;#39;男&amp;#39;, &amp;#39;78&amp;#39;);</description></item><item><title>SQL</title><link>https://lunarwhite.github.io/posts/guides/sql/</link><pubDate>Fri, 30 Oct 2020 20:21:48 +0000</pubDate><guid>https://lunarwhite.github.io/posts/guides/sql/</guid><description>1 建表添加约束 not null primary key foreign key auto_increment default (e.g. getdate()) check (e.g. value)</description></item><item><title>Java</title><link>https://lunarwhite.github.io/posts/guides/java/</link><pubDate>Wed, 30 Sep 2020 20:21:48 +0000</pubDate><guid>https://lunarwhite.github.io/posts/guides/java/</guid><description>1 命名规范 package/project: hellojava class: MyPeople variable value/method: myAge, getGender() constant value: TEMP_PI</description></item><item><title>Quit QHNU @himself65</title><link>https://lunarwhite.github.io/posts/thoughts/quit-qhnu/</link><pubDate>Sun, 06 Sep 2020 10:08:27 +0000</pubDate><guid>https://lunarwhite.github.io/posts/thoughts/quit-qhnu/</guid><description>原文链接
1 不满 绝大部分人以为考一个好大学，就可以学到无数的知识，就可以学到烂大学所学不到的知识。 至少我高中同龄人都是这么认为，其他的大都是父母逼迫考一个好大学， 但是我在我高中时候我就不这么认为。
那时起便或多或少开始混社交平台， 听到一些知名大学学长学姐喷自己学校的CS专业课考的都是什么鬼东西。 因为我那时候水平也还说得过去，所以看到这些无聊的试题甚至开始怀疑名牌大学连这种无聊问题都得拿出来考吗？
于是我那时起便越来越不在乎考一个名牌大学会对自己编程技术有什么本质性提高。至少我的梦想和考名牌大学，没有什么必然关系，所以当时我决定不像别人一样，追求别人所追求或被迫追求的虚幻的东西。
所以之后反过来我看一些高考生，抱着“考一个好大学就会学好知识”这种牛头不对马嘴的想法产生了生理厌恶，高二那会儿我的编程水平已经略有水平了， 有同班同学以一种“我考了985之后学一年就可以吊打你”这样的想法对我不屑一顾。当然我也不想理会他，因为我发现和一个思维不在一个平面的人交流是有多么费劲。
如果一个人把政策评分作为自己的至高追求，那么他就是这个政策的牺牲品。这对于一个对大学充满向往的高考生来说是一个梦想的破灭，当然对我当年来说也是。
2 放纵 于是高三边开始放飞自我了，我还记得班主任要求每个学生每周末都得去班主任租的出租屋上自习课， 说是自习课，去了之后便开始人手一张卷子。 嫌太热，老师说没有空调，美其名曰磨练意志。老师看到我们开始学习后，有时候便心满意足的回家了，这时我们便开始各干各的事情，有的聊天，有的刷手机， 有时候我拿着一本计算机书，自顾自的看了起来。
所以之后我也再也不去所谓的自习课了，老师很生气，还让我妈签保证书，内容是保证不上自习课也能管理好自己学习。我妈问我，你能管好自己的学习？我尴尬回答，当然能管好“学习”。
老师同学也知道我根本没有把学习放在高考上，放学后有的同学看我走的急，之后便充满奇怪的语气：“又赶着回家写代码了？”。
老师也对我很生气，班主任时常拿我不务正业来明嘲暗讽，“就会个编程哪有用啊，不考个好大学不照样不行？”。 到之后几乎不管我了，偶尔办公室电脑坏了教我去修一下，然后总得暗示一下如果我考个好大学就能更强了。
说到这里，我就想起“内卷”一词，至少当时我认为每天只睡六个小时不到，刷一百套卷子反而对我之后写程序没有任何帮助， 便心安理得的困了就睡，饿了就吃。班主任见后便给我“不努力，不上进”的头衔，成为了班里的反面教材。 虽然一开始给我的压力是非常大的，后来我逐渐意识到我根本不在乎这件事， 那么别人对我保有的不切实际的愿望我更不需要在乎。于是更加心安理得了。
3 高考 一番耕耘一番收获，最后以一个很低的分数考了一个我从来没听说过的大学 —— 青海师范大学。
还记得最后一个学期让我们把自己理想中的大学贴到课桌上，我实在觉得我知道的我肯定一所都去不了， 因为当时我认识一个有趣的学长（后来转学到了日本）在山东大学，于是也写上了SDU。
班主任看了看我们所有人填的内容，于是便投来嘲讽的话：“整个学校一年一本学生才两百个不到，你们这么一写，985都得超过50个”
全班笑了，我也笑了。他在笑我们，我在笑他。
高考完第一件事，我便去旅游了，见了见那个学长，见了见其他聊的不错的网友。随后我开始惋惜如果能早认识这样志同道合的人便更好了。
即使我内心不在乎，但我的父母在乎、读研在乎、招聘在乎，所有人都在乎， 出成绩后老师便开始打听每个人考了多少，父母们开始议论能上哪个大学，同学们开始做所谓的道别。所以我也不得不在乎这件事本身。
可能考得很低，至少周围人大都觉得我很低。 也有几个同学高考后不理想去衡水复读去了，至少我觉得是不值得，我有自己想做的事情，但绝对不是为了考一个大学而累死累活。
我的高三数学老师说，以我的脑子绝对可以上清华。我当然觉得她在扯淡，要不然我也不会在这个成绩永远比隔壁中学低一个水平的中学上学了。 所以我不知道她看到我现在的结果是什么样的反应，但是我知道她现在一定不认识我这个人了。
父母之后看着我的成绩没有什么话说，毕竟他们也知道结果，可能是他们想起来我的之后人生就越走越烂，于是看我躺在床上刷手机时候猛地开始骂， “你看看你的成绩，你这以后怎么办？”。
本来我知道我想怎么办，但是一这么问我，我也不知道我想怎么办。
4 大学 大学可能是人生的大事，于是父亲母亲奶奶，一家四口开车把我从老家，边开车边旅游，大张旗鼓的把我送到了学校。 临走前还不忘嘱咐我好好和室友打好关系、认真听课，努力考研考出这个学校。
这话听着完全没问题，但是总是让我对他们对人生的观点产生了一种无奈感。
可能考得很高，随着我和班里人逐渐交流，当发现本地的学生都比我低一百分以上，我便不好意思和他们继续讨论高考。
于是我想和室友聊点什么破冰，我问，你有学过编程吗？
“没有。”
那……你学这个专业干什么？
得到的回复依然是赚的钱多、别人推荐，甚至我意识到他们可能连《了不起的盖茨比》都没有读过。
我便不再和他们深交，转而继续自己手中的书里，网上的自己。
过去了大一刚开学的新鲜劲，我很快意识到了甚至班里的人都不是来学“计算机”的，而这对我来说越来越是一种痛苦。
当我把GitHub链接发给班主任时候，得到的回复只有：“你学过C语言啊，那你可以去机器人社团试一试”，而我了解后那个社团做的是我高一就做烂的东西。
我便没有任何想参加的兴趣。
一次上完课回宿舍路上，一个女生略带疑惑和嘲讽的问我：“你也不说话也不和别人聊天，你没有朋友难道不寂寞吗？”。我苦笑，但又不知道说什么为好。
室友是四个青海人，一个河南人。说实在，经济条件比我差的多了，其中一位从他县城电脑城花了五千高价买了一台电脑，至少我认识不少数码圈朋友，所以对配置这些略有所闻。 第二个学期他的主板坏了，没钱，为了攒钱修主板开始每天吃泡面。
可能我想做一个好人，帮他解决这些问题，但我又想到他每天打游戏到凌晨一两点，早晨醒来靠着他对着抖音大笑。我觉得，我做个旁观者会更善良。
另一个河南人，开学后买了各种奇怪的编程书，有些我翻一遍就意识到这是本绝佳的烂书。于是指点了他一些经典的编程书，随后他便买了回来，每天钻研了几个小时后便继续躺在床上打游戏了。 我便有点爽，问他你怎么不写了，他说，这不是正下载软件呢？我看了看，学习安卓开发，下载Android Studio，一看就是没开代理。想着推荐给他几个好的代理，但想起他经济可能支撑不起这些， 给他推荐中文编程书都是二手的。我便又想起盖茨比中那句话，没再说什么。
大一上学期，意识到学校不愧是这个分数的学校，于是开始自顾自学习起来，最后没想到竟然英语挂科了，仔细一想英语课一直都干了什么， 来到班里后，找个角落拿出iPad，然后开始继续读昨天没读完的一篇英文Paper。 所以好像从来没交过布置的作业，甚至考试要求背的单词都没有记全，考试时候耳机出了问题连续几道题都没听全。</description></item><item><title>First try in SwitchyOmega and shadowsocks</title><link>https://lunarwhite.github.io/posts/devtools/so-ss/</link><pubDate>Thu, 20 Aug 2020 08:06:12 +0000</pubDate><guid>https://lunarwhite.github.io/posts/devtools/so-ss/</guid><description>GFW 确实影响了日常，记录踩坑以备不时之需
1 SS 账号 youneed.win free-ss Share-SSR-V2ray 2 SO 配置 chrome-setup-guide</description></item><item><title>Book list for a swe</title><link>https://lunarwhite.github.io/posts/thoughts/booklistdnb/</link><pubDate>Thu, 13 Aug 2020 18:23:32 +0000</pubDate><guid>https://lunarwhite.github.io/posts/thoughts/booklistdnb/</guid><description>1 Will null 2 Done null</description></item><item><title>DNS cache poisoning problem in GitHub.com</title><link>https://lunarwhite.github.io/posts/devtools/dns-github/</link><pubDate>Mon, 13 Jul 2020 21:20:01 +0000</pubDate><guid>https://lunarwhite.github.io/posts/devtools/dns-github/</guid><description>0 update 目前来看，用SwitchHosts统一管理或许是更佳选择 1 查询ip 查询地址： ipaddress 需要查询： http://github.com/ http://assets-cdn.github.com/ http://github.global.ssl.fastly.net/ 2 修改host 输入命令： sudo notepad C:\Windows\System32\drivers\etc\hosts 形式如下： 140.82.114.3 github.com 185.199.108.153 assets-cdn.github.com 185.199.109.153 assets-cdn.github.com 185.199.110.153 assets-cdn.github.com 185.199.111.153 assets-cdn.github.com 199.232.69.194 github.global.ssl.fastly.net 3 刷新缓存 输入命令： ipconfig /flushdns 4 其他方法 DNSCrypt</description></item><item><title>C++</title><link>https://lunarwhite.github.io/posts/guides/cpp/</link><pubDate>Sat, 06 Jun 2020 20:21:48 +0000</pubDate><guid>https://lunarwhite.github.io/posts/guides/cpp/</guid><description>1 基础语法 1.1 输入输出 ⽤cin读⼊字符串的时候，是以空格为分隔符的，如果想要读⼊⼀整⾏的字符串，就需要⽤getline string s; getline(cin,s); //读取⼀⾏的字符串，包括空格 cout&amp;lt;&amp;lt;s.length(); //输出字符串s的⻓度 换行\n和endl有区别，后者输出一个换行符，并立即刷新缓冲区，使得栈中的东西刷新一次。过多的 endl 是影响程序执行效率低下的因素之一。 &amp;quot; &amp;quot; &amp;lt; &amp;gt;头文件也有区别，前者优先在本地目录下找，找不到再去系统目录。 cout多行时，正确姿势： cout&amp;lt;&amp;lt;&amp;#34;Forst line there.\n&amp;#34; &amp;lt;&amp;lt;&amp;#34;Second line here.\n&amp;#34; 真正的开发中，尽量避免使用using namespace std;等直接引入整个命名空间,否则会因为命名空间污染导致很多不必要的问题。比如自己写的某个函数，名称正好和std中的一样，编译器会不知道使用哪一个，引起编译报错。 extern int a;，只是声明有个变量a存在，具体在哪定义，需要编译器找。 static全局变量：改变作用范围，不改变存储位置；static局部变量：改变存储位置，不改变作用范围。 访问结构成员，用点运算符；通过指针访问结构成员，用箭头运算符。 1.2 字符串 substr，截取某个字符串中的⼦串，⽤法有两种形式： string s2=s.substr(4); //从下标4开始⼀直到结束 string s3=s.substr(5,3); //从下标5开始，3个字符 String 类实例： string s=&amp;#34;vscode&amp;#34;; //append s.append(&amp;#34;hello&amp;#34;); //delete int pos=s.find(&amp;#34;ll&amp;#34;); s.replace(pos,4,&amp;#34;&amp;#34;); // 从pos开始后的4个字符替换为空，即删除 //find int first=s.find_first_of(&amp;#34;.&amp;#34;); //从头开始寻找字符&amp;#39;.&amp;#39;的位置 int last=s.</description></item><item><title>MobaXterm</title><link>https://lunarwhite.github.io/posts/devtools/mobaxterm/</link><pubDate>Wed, 13 May 2020 22:53:58 +0000</pubDate><guid>https://lunarwhite.github.io/posts/devtools/mobaxterm/</guid><description>1 设置 1.1 具体选项 选中复制，右键粘贴：Settings &amp;ndash;&amp;gt; Configuration &amp;ndash;&amp;gt; Terminal , 然后打勾选中 字体、背景 设置：Settings &amp;ndash;&amp;gt; Configuration &amp;ndash;&amp;gt; Terminal 取消自动连接SFTP：settings &amp;ndash;&amp;gt; Configuration，在弹出的对话框中选择 SSH，再将automaticall switch to SSH-browser tab after login前面的对勾去掉</description></item><item><title>Windows terminal</title><link>https://lunarwhite.github.io/posts/devtools/win-terminal/</link><pubDate>Wed, 13 May 2020 22:53:58 +0000</pubDate><guid>https://lunarwhite.github.io/posts/devtools/win-terminal/</guid><description>千呼万唤始出来，微软自家也有能称得上是terminal的terminal了
1 参考 官方文档 2 注意 确保添加bash到path 获取 guid 获取 icon(256*256) Powershell：background1 background2 Windows：background1 background2 Git-Bash：background1 background2 icon1 Ubuntu：background1 icon1 Linux：background1 background2 background3 3 添加到右键菜单 Windows Registry Editor Version 5.00 [HKEY_CLASSES_ROOT\Directory\Background\shell\wt] @=&amp;#34;Terminal Here&amp;#34; &amp;#34;Icon&amp;#34;=&amp;#34;C:\\Users\\mewin\\scoop\\apps\\windows-terminal\\current\\wt.exe&amp;#34; [HKEY_CLASSES_ROOT\Directory\Background\shell\wt\command] @=&amp;#34;C:\\Users\\mewin\\scoop\\apps\\windows-terminal\\current\\wt.exe&amp;#34; 4 配置 { &amp;#34;$schema&amp;#34;: &amp;#34;https://aka.ms/terminal-profiles-schema&amp;#34;, // Add custom actions and keybindings to this array. // To unbind a key combination from your defaults.json, set the command to &amp;#34;unbound&amp;#34;.</description></item><item><title>Eclipse IED settings for Java</title><link>https://lunarwhite.github.io/posts/devtools/eclipse-java/</link><pubDate>Sun, 10 May 2020 17:13:00 +0000</pubDate><guid>https://lunarwhite.github.io/posts/devtools/eclipse-java/</guid><description>1 全局配置 代码自动补全 Window -&amp;gt; Perferences -&amp;gt; Java -&amp;gt; Editor -&amp;gt; Content Assist 在Auto Activation 段中设置 Auto activation triggers for Java .abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ editor字体变大；console字体变小 General-&amp;gt;workspace-&amp;gt;更改GBK-&amp;gt;UTF-8 2 shortcuts 1.auto getter &amp;amp; setter Alt+Shift+S -&amp;gt; R -&amp;gt; Alt+A 2.run &amp;amp; debug Run CTRL+F11 Debug F11</description></item><item><title>Python</title><link>https://lunarwhite.github.io/posts/guides/python/</link><pubDate>Thu, 30 Apr 2020 20:21:48 +0000</pubDate><guid>https://lunarwhite.github.io/posts/guides/python/</guid><description>1 算数运算 乘法：3**2 Log(A) 其中A为0的情况会报警告。 定义一个epsilon=1e-8，np.log(A + epsilon) 2 数据类型 2.1 基本 type函数：type(12.3) 2.2 列表 结构 a=[1,2,3,4,5] 打印 print(a) 获取元素，索引0到1 a[0:2] 获取元素，索引0到最后 a[0:] 获取元素，索引0到倒数第二 a[:-1] 2.3 字典 结构 me={'height':180} 访问元素 me['height']，输出 180 添加元素 me[‘weight’]=70，print(me) 后输出 {'height': 180, 'weight': 70} 3 判断与循环 3.1 if hungry=False if hungry: ... print(&amp;#34;I&amp;#39;m hungry&amp;#34;) # 需要4个空格缩进4个字符 ... else: ... print(&amp;#34;I&amp;#39;m not hungry&amp;#34;) ... # 输出 I’m not hungry 3.</description></item><item><title>Conda</title><link>https://lunarwhite.github.io/posts/guides/conda/</link><pubDate>Sun, 12 Apr 2020 17:07:05 +0000</pubDate><guid>https://lunarwhite.github.io/posts/guides/conda/</guid><description>1 基本环境 1.1 检查pip python -m ensurepip python -m pip install --upgrade pip 1.2 换镜像源 conda config --add channels https://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/free conda config --add channels https://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/main conda config --add channels https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud/conda-forge conda config --add channels https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud/msys2 conda config --set show_channel_urls yes 1.3 其他常用 # 创建环境 conda create --name &amp;lt;env_name&amp;gt; &amp;lt;package_names&amp;gt; # 切换环境 activate &amp;lt;env_name&amp;gt; deactivate &amp;lt;env_name&amp;gt; # 显示已安 conda info --envs # 复制，后删除 conda create --name &amp;lt;new_env_name&amp;gt; --clone &amp;lt;copied_env_name&amp;gt; conda remove --name &amp;lt;env_name&amp;gt; --all 2 常用包库 2.</description></item><item><title>Git</title><link>https://lunarwhite.github.io/posts/guides/git/</link><pubDate>Thu, 12 Mar 2020 20:20:48 +0000</pubDate><guid>https://lunarwhite.github.io/posts/guides/git/</guid><description>1 参考 2 常用 # 撤销 git reset --soft HEAD^</description></item><item><title>VSCode</title><link>https://lunarwhite.github.io/posts/devtools/vscode/</link><pubDate>Thu, 02 Jan 2020 17:04:16 +0000</pubDate><guid>https://lunarwhite.github.io/posts/devtools/vscode/</guid><description>拥抱开源，visual studio code简直就是开发利器、宇宙第一editor，尤其是众多开源的extension，让vscode始终充满活力。本文记录了不同语言下vscode的基本配置和全局快捷键，希望能最大效度利用好此工具，happy hacking，happy coding
1 全局配置 登录账号同步 删除自带theme 2 添加到右键菜单 Windows Registry Editor Version 5.00 [HKEY_CURRENT_USER\Software\Classes\*\shell\Open with &amp;amp;Code] @=&amp;#34;Open with Code&amp;#34; &amp;#34;Icon&amp;#34;=&amp;#34;C:\\Users\\mewin\\scoop\\apps\\vscode\\current\\Code.exe&amp;#34; [HKEY_CURRENT_USER\Software\Classes\*\shell\Open with Code\command] @=&amp;#34;\&amp;#34;C:\\Users\\mewin\\scoop\\apps\\vscode\\current\\Code.exe\&amp;#34; \&amp;#34;%1\&amp;#34;&amp;#34; [HKEY_CURRENT_USER\Software\Classes\Directory\shell\Open with Code] @=&amp;#34;Open with Code&amp;#34; &amp;#34;Icon&amp;#34;=&amp;#34;C:\\Users\\mewin\\scoop\\apps\\vscode\\current\\Code.exe&amp;#34; [HKEY_CURRENT_USER\Software\Classes\Directory\shell\Open with Code\command] @=&amp;#34;\&amp;#34;C:\\Users\\mewin\\scoop\\apps\\vscode\\current\\Code.exe\&amp;#34; \&amp;#34;%1\&amp;#34;&amp;#34; [HKEY_CURRENT_USER\Software\Classes\Directory\Background\shell\Open with Code] @=&amp;#34;Open with Code&amp;#34; &amp;#34;Icon&amp;#34;=&amp;#34;C:\\Users\\mewin\\scoop\\apps\\vscode\\current\\Code.exe&amp;#34; [HKEY_CURRENT_USER\Software\Classes\Directory\Background\shell\Open with Code\command] @=&amp;#34;\&amp;#34;C:\\Users\\mewin\\scoop\\apps\\vscode\\current\\Code.exe\&amp;#34; \&amp;#34;%V\&amp;#34;&amp;#34; 3 快捷键 重开一行：光标不在行尾，ctrl + enter 向下重开一行；ctrl+shift + enter 则是在上一行重开一行 删除一行：光标没有选择内容时，ctrl + x 剪切一行；ctrl +shift + k 直接删除一行 移动一行：alt + ↑ 向上移动一行；alt + ↓ 向下移动一行 复制一行：shift + alt + ↓ 向下复制一行；shift + alt + ↑ 向上复制一行 ctrl + f ：搜索 ctrl + alt + f： 替换 ctrl + shift + f：在项目内搜索 Ctrl+P 快速打开最近打开的文件 Ctrl+Shift+N 打开新的编辑器窗口 Ctrl+Shift+W 关闭编辑器 Ctrl + Home 跳转到页头 Ctrl + End 跳转到页尾 Ctrl + Shift + [ 折叠区域代码 Ctrl + Shift + ] 展开区域代码 Ctrl + / 添加关闭行注释 Shift + Alt +A 块区域注释</description></item><item><title>Windows basic development environment deploy</title><link>https://lunarwhite.github.io/posts/devtools/dev-win/</link><pubDate>Tue, 17 Dec 2019 17:02:13 +0000</pubDate><guid>https://lunarwhite.github.io/posts/devtools/dev-win/</guid><description>拿到一台新的Windows开发用电脑需做的几件小事
1 host-win 设置 流量计费的连接 电源计划 文件夹系统 服务 WIN+R: services.msc 本地服务 Connected User Experiences and Telemetry microsoft compatibility telemetry windows search xbox 还原点 安装软件 VMware-Player scoop 2 vm-win 创建 PRO：4G/64G/4 HME：2G/32G/2 关闭3D/USB3.1/虚拟化/移除打印机 US/vmwin 安装软件 VM-Tools 7-zip GeekUninstall Dism++ Everything KMS-pico 设置 剩余使用时间 slmgr.vbs -xpr 3 shortcuts shift+双击：一次性打开多个文件 Alt+双击：属性 shift+方向键：可以选择文字 F2：重命名 CTRL+W关闭网页 CTRL+Shift+T恢复关闭网页 win+D/M：显示桌面 win+Tab：任务视图</description></item><item><title>Install linux in vmware virtual machine</title><link>https://lunarwhite.github.io/posts/devtools/vm-linux/</link><pubDate>Fri, 29 Nov 2019 16:59:56 +0000</pubDate><guid>https://lunarwhite.github.io/posts/devtools/vm-linux/</guid><description>本文简单介绍了Linux基本的开发环境配置，基于VMware虚拟机，搭配Ubuntu LTS，借助ssh工具和host机联络，比较舒适
1 安装部署 创建 2G/16G/2 关闭3D/USB3.1/虚拟化/移除打印机 xx72/LA/vmlnx/xx 安装VMTool # extract here # open in terminal # root sudo su # install ./vmware-install.pl 设置 2 卸载预装 # 卸载 dpkg -l | grep gnome sudo apt-get remove --purge -y gnome-bluetooth sudo apt-get remove --purge -y gnome-calculator sudo apt-get remove --purge -y gnome-characters sudo apt-get remove --purge -y gnome-disk-utility sudo apt-get remove --purge -y gnome-font-viewer sudo apt-get remove --purge -y gnome-logs sudo apt-get remove --purge -y gnome-online-accounts sudo apt-get remove --purge -y gnome-power-manager sudo apt-get remove --purge -y gnome-screenshot sudo apt-get remove --purge -y gnome-system-monitor sudo apt-get remove --purge -y gnome-user-docs dpkg -l | grep firefox sudo apt-get remove --purge -y firefox sudo apt-get remove --purge -y firefox-locale-en 3 清理空间 # 删除系统不再使用的孤立软件 sudo apt-get autoremove --purge # 清理旧版本的软件缓存 sudo apt-get autoclean # 清理所有软件缓存 sudo apt-get clean # 清理缩略图缓存 rm -rf ~/.</description></item><item><title>scoop: command-line package manager for Windows</title><link>https://lunarwhite.github.io/posts/devtools/win-scoop/</link><pubDate>Wed, 20 Nov 2019 16:58:13 +0000</pubDate><guid>https://lunarwhite.github.io/posts/devtools/win-scoop/</guid><description>众所周知，Windows 下进行开发多少有点反人类，环境配置和 macos/linux 相比，简直就是灾难。索性有人开源了一系列包管理工具，scoop/chocolatey/winget，对比之下，选择了 scoop，体验良好，写一文向大家安利。
1 必要性 如果用过 macOS 或者 Linux 的朋友，或多或少都听说过包管理工具。通过包管理工具，你可以直接在终端中快速自动地安装、配置、卸载和升级软件，而无需通过 GUI 页面一步步手动安装下载软件。这非常适合一次性安装非常多软件，大大地节约了软件安装所需要的时间和步骤，同时也在一定程度上确保了来源软件的安全性
Windows下三大包管理工具，scoop/winget/chocolatey 降低安装维护软件的成本 避免安装大量软件造成的路径污染 不必查找和安装软件的其他依赖项 避免捆绑和垃圾软件 彻底地卸载 2 环境部署 set-executionpolicy remotesigned -scope currentuser iex (new-object net.webclient).downloadstring(&amp;#39;https://raw.githubusercontent.com/lukesampson/scoop/master/bin/install.ps1&amp;#39;) # basic scoop install 7zip scoop install git scoop install sudo scoop install innounp scoop install dark scoop checkup 3 软件安装 app query https://scoop-docs.now.sh/apps/ https://rasa.github.io/scoop-directory/by-apps app bucket # add third party bucket scoop bucket add &amp;lt;bucket&amp;gt; &amp;lt;bucket_url&amp;gt; # add official bucket scoop bucket add extras scoop bucket add versions scoop bucket add nerd-fonts scoop bucket add java normal # font scoop install DejaVuSansMono-NF # system scoop install geekuninstaller scoop install dismplusplus scoop install listary scoop install everything scoop install motrix scoop install kms # network &amp;amp; proxy scoop install switchhosts scoop install psiphon3 scoop install shadowsocks scoop install v2rayn # daily office scoop install chromium scoop install firefox scoop install wpsoffice scoop install rambox scoop install telegram scoop install slack scoop install steam # multimedia scoop install ditto # CTRL+shift+V scoop install lightshot # CTRL+shift+S scoop install imageglass scoop install mpv development # terminal emulator scoop install windows-terminal # admin scoop install mobaxterm # admin, icon scoop install hyper # admin # text editor / IDE scoop install typora # theme: github, night, monokai, misty, purple, fluent, drake scoop install vscode scoop install vscode-insider scoop install jetbrains-toolbox # image &amp;amp; text scoop install hugo-extended scoop install pandoc scoop install latex scoop install graphviz # database scoop install mysql scoop install sqlite scoop install postgresql scoop install mongodb scoop install redis scoop install kafka scoop install rabbitmq # web &amp;amp; other scoop install nodejs-lts scoop install nginx scoop install tomcat scoop install postman # golang scoop install go # python scoop install miniconda3 # c/cpp scoop install gcc scoop install gdb # java scoop install openjdk8-redhat scoop install maven 常用命令 # 查看已安装程序 scoop list # 查看已经添加的库 scoop bucket list # 查看其他库 scoop bucket known # 移除已经添加的库 scoop bucket rm nerd # 查找软件 scoop search &amp;lt;app&amp;gt; # 显示软件信息（含必要配置说明） scoop info &amp;lt;app&amp;gt; # 查看更新 scoop status # 自身诊断 scoop checkup # 更新scoop, 更新指定软件 scoop update * # 卸载程序并移除所有配置文件 scoop uninstall &amp;lt;app&amp;gt; -p # 删除所有缓存 scoop cache rm * scoop cleanup * # 卸载 Scoop scoop uninstall scoop</description></item><item><title>What I care about when choosing electronic devices</title><link>https://lunarwhite.github.io/posts/thoughts/tech-device-selection/</link><pubDate>Thu, 31 Oct 2019 18:30:38 +0000</pubDate><guid>https://lunarwhite.github.io/posts/thoughts/tech-device-selection/</guid><description>1 Phone 电量：续航＋快充 便携：重量 视力：是否频闪+屏幕大小 信号 散热 2 Laotop 电量：续航＋快充 便携：重量 性能：AMD+内存 16G 空间：固态 512G 接口：HDMI+网线+USB3.0+&amp;hellip; 视力：是否频闪+屏幕大小 信号：wifi-6 散热 背光 屏占比 3 Keyboard 便携：重量 场合：静音 卫生：键帽 电量：续航 背光</description></item><item><title>Personal static website hosts on Github Pages using Hugo</title><link>https://lunarwhite.github.io/posts/devtools/gp-site/</link><pubDate>Mon, 14 Oct 2019 19:40:48 +0000</pubDate><guid>https://lunarwhite.github.io/posts/devtools/gp-site/</guid><description>0 Quick start Quick Start - Hugo Host on GitHub - Hugo 1 Create hugo repository install hugo on Windows: scoop install hugo-extended create site directory: hugo new site personal-blog-v2 2 Add hugo theme choose from Hugo Theme Gallery clone theme repo, like cd personal-blog git clone https://github.com/athul/archie.git themes/archie remove .git dependence 3 Add contents content.md template --- title: &amp;#34;{{ replace .</description></item><item><title>About</title><link>https://lunarwhite.github.io/about/</link><pubDate>Sat, 12 Oct 2019 00:00:00 +0000</pubDate><guid>https://lunarwhite.github.io/about/</guid><description>Hi, there👋, this is lunarwhite. I come from Jinan, &amp;ldquo;the Spring City&amp;quot;💦, a traditional city in Shandong province, which is Known for its spring water. Now I&amp;rsquo;m an undergraduate in computer science💻 major at Shandong University🏫, expecting to graduate in 2023👨‍🎓. Studying is not a smooth ride. Luckily, after two years of study and exploratsion, I find myself more of an engineer than a researcher. And I have a vague idea of what my future life should become: do solid works, build exciting things and make software used by a large community.</description></item><item><title>Pick meaningful words in books</title><link>https://lunarwhite.github.io/posts/thoughts/interesting-words-in-book/</link><pubDate>Tue, 13 Aug 2019 18:23:32 +0000</pubDate><guid>https://lunarwhite.github.io/posts/thoughts/interesting-words-in-book/</guid><description>海恩法则 指出：每一起严重事故的背后，必然有29次轻微事故和300起未遂先兆以及1000起事故隐患。 强调两点：一是事故的发生是量的积累的结果；二是再好的技术，再完美的规章，在实际操作层面，也无法取代人自身的素质和责任心。 庞氏游戏 对金融领域投资诈骗的称呼，是金字塔骗局（Pyramid scheme）的始祖。 很多非法的传销集团就是用这一招聚敛钱财。又称“拆东墙补西墙”“空手套白狼”。简言之就是利用新投资人的钱来向老投资者支付利息和短期回报，以制造赚钱的假象进而骗取更多的投资。 后真相 事实真相是什么不再重要，人们对事件所产生的情绪的关注超过了事实本身。 真相衰退 权威机构的公信力丧失，人们的信息来源变窄，有相同观点的人聚在一起，拒绝对真正的问题展开的讨论。 猫狗定律 路上有只猫和狗，你说你见到了一只狗，你并没说错，但你却忽视了一只猫。</description></item></channel></rss>