<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>lunarwhite</title><link>https://lunarwhite.github.io/</link><description>Recent content on lunarwhite</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><copyright>© lunarwhite</copyright><lastBuildDate>Thu, 26 Aug 2021 11:21:31 +0000</lastBuildDate><atom:link href="https://lunarwhite.github.io/index.xml" rel="self" type="application/rss+xml"/><item><title>Ask and answer</title><link>https://lunarwhite.github.io/posts/thoughts/ask-and-answer/</link><pubDate>Thu, 26 Aug 2021 11:21:31 +0000</pubDate><guid>https://lunarwhite.github.io/posts/thoughts/ask-and-answer/</guid><description>Guide How To Ask Questions The Smart Way Offer basic infos 编程语言 在做什么事情中遇到了问题 如 Anaconda install pacakge 报错信息 Asking patterns I am searching for a long time on net.</description></item><item><title>Be a qualified software engineer - Ⅱ</title><link>https://lunarwhite.github.io/posts/thoughts/mottosasdev2/</link><pubDate>Mon, 23 Aug 2021 21:02:12 +0000</pubDate><guid>https://lunarwhite.github.io/posts/thoughts/mottosasdev2/</guid><description>一个合格的开发者至少应该做到的
1 规范开发 Git Linux Docker/Kubernetes File Structure Document Check Style Unit Test CI/CD Script 2 参与社区 Open-Source Product Community&amp;rsquo;s Tech Blog Issue Pull Request Join Organization Code Review</description></item><item><title>Be a qualified software engineer - Ⅰ</title><link>https://lunarwhite.github.io/posts/thoughts/mottosasdev1/</link><pubDate>Mon, 23 Aug 2021 15:18:07 +0000</pubDate><guid>https://lunarwhite.github.io/posts/thoughts/mottosasdev1/</guid><description>大学以来，从自己经历的和我看到的，做一个总结（不定期更新
其实题目与内容并不完全契合，因为有些不只是开发人员才应该注意的，或许以后会优化拆分
1 软件使用 360浏览器/xx浏览器😟 Firefox/Chromium(Edge/Chrome)😊 xx管家/xx杀毒😟 Windows Defender😊 QQ/微信/..直接装在主机 😟 装在沙盒/虚拟机😊 过时的工具😟 社区活跃的&amp;amp;用户基数大的😊 未授权的/破解的工具😟 付费授权的/免费的😊 混乱的软件安装来源&amp;amp;路径😟 包管理工具(Homebrew/Scoop)😊 2 开发习惯 原生CMD&amp;amp;PowerShell😟 Windows Terminal/MobaXterm😊 优先闭源的工具😟 优先开源的工具😊 优先本地开发😟 优先远程服务器😊 优先Windows😟 优先Linux😊 优先富文本😟 优先标记语言(LaTex/MarkDown)😊 混乱的代码文件路径&amp;amp;版本😟 版本控制😊 3 信息获取 百度搜索😟 Bing搜索/Google搜索😊 优先CSDN😟 优先官方文档+StackOverflow😊 老旧过时的课本😟 开放的&amp;amp;与时俱进的在线资源😊 表面干货的引流洗稿自媒体😟 大佬的社区动态😊 4 心态调整 从群体的大多数中寻找安全感😟 有自己的主见😊 成为做题家死磕GPA😟 多实践早去业界接受毒打😊 固执己见目空一切😟 友善交流虚心学习😊 Do one thing, and do it well😊 我是个学生😟 我是个开发者😊 以学会&amp;hellip;为目标😟 以开发出&amp;hellip;为目标😊 程序不能跑😟 程序和你有一个能跑😊 死磕Bug😟 开心最重要😊</description></item><item><title>[MIT-missing] 07 Potpourri, Q&amp;A</title><link>https://lunarwhite.github.io/posts/notes/mitmissing7/</link><pubDate>Tue, 03 Aug 2021 19:41:22 +0000</pubDate><guid>https://lunarwhite.github.io/posts/notes/mitmissing7/</guid><description>Potpourri - missing-semester
Q&amp;amp;A - missing-semester
1 Daemons Most computers have a series of processes that are always running in the background rather than waiting for a user to launch them and interact with them.</description></item><item><title>[MIT-missing] 06 Security &amp; Cryptography</title><link>https://lunarwhite.github.io/posts/notes/mitmissing6/</link><pubDate>Thu, 29 Jul 2021 14:51:12 +0000</pubDate><guid>https://lunarwhite.github.io/posts/notes/mitmissing6/</guid><description>Security and Cryptography - missing-semester
1 Entropy Entropy is a measure of randomness. This is useful, for example, when determining the strength of a password.</description></item><item><title>[MIT-missing] 05 Metaprogramming</title><link>https://lunarwhite.github.io/posts/notes/mitmissing5/</link><pubDate>Tue, 27 Jul 2021 21:01:18 +0000</pubDate><guid>https://lunarwhite.github.io/posts/notes/mitmissing5/</guid><description>Metaprogramming - missing-semester
1 build systems make is one of the most common build systems out there. When you run make, it consults a file called Makefile in the current directory.</description></item><item><title>[MIT-missing] 04 Version Control (Git)</title><link>https://lunarwhite.github.io/posts/notes/mitmissing4/</link><pubDate>Sun, 25 Jul 2021 22:11:48 +0000</pubDate><guid>https://lunarwhite.github.io/posts/notes/mitmissing4/</guid><description>Version Control (Git) - missing-semester
1 git’s data model 1.1 snapshots Git models the history of a collection of files and folders within some top-level directory as a series of snapshots.</description></item><item><title>[MIT-missing] 03 Command-line Environment</title><link>https://lunarwhite.github.io/posts/notes/mitmissing3/</link><pubDate>Sat, 24 Jul 2021 20:11:48 +0000</pubDate><guid>https://lunarwhite.github.io/posts/notes/mitmissing3/</guid><description>Command-line Environment - missing-semester
1 Job Control To kill a process, type Ctrl-C. To pause and backgrounding processes, type Ctrl-Z.</description></item><item><title>[MIT-missing] 02 Data Wrangling</title><link>https://lunarwhite.github.io/posts/notes/mitmissing2/</link><pubDate>Thu, 22 Jul 2021 15:11:48 +0000</pubDate><guid>https://lunarwhite.github.io/posts/notes/mitmissing2/</guid><description>Data Wrangling - missing-semester
1 introduction To wrangle data, we need two things: data to wrangle, and something to do with it.</description></item><item><title>[MIT-missing] 01 The shell</title><link>https://lunarwhite.github.io/posts/notes/mitmissing1/</link><pubDate>Wed, 21 Jul 2021 15:21:48 +0000</pubDate><guid>https://lunarwhite.github.io/posts/notes/mitmissing1/</guid><description>Course overview + the shell - missing-semester
Shell Tools and Scripting - missing-semester
01 - intro some commands 1.</description></item><item><title>Dilemma in software engineering education @tison</title><link>https://lunarwhite.github.io/posts/thoughts/dilemma-in-se/</link><pubDate>Sat, 03 Jul 2021 23:07:58 +0000</pubDate><guid>https://lunarwhite.github.io/posts/thoughts/dilemma-in-se/</guid><description>原文链接
0 引入 第一段出自《软件困局》一书中文版译序。
软件专业的学生并没有学到在团队中如何编写便于后续维护的软件，他们在大学里完成的软件作业仅达到了课程项目的要求，却与业内软件开发的实际规模和真实复杂度完全脱节。
第二段出自《黑客与画家》一文。
黑客真正想做的是设计优美的软件，考核这种工作是非常困难的&amp;hellip;大学和实验室把论文数量作为考核黑客工作的指标&amp;hellip;这样的考核容易实施，而容易实施的考核总是首先被采用&amp;hellip;大学和实验室不允许黑客做他们想做的事情。
1 设计与研究 黑客的工作不是学术研究，而是软件设计。研究必须是【新】的，但不一定是【好】的；设计不一定是【新】的，但一定是【好】的。
黑客的工作往往不是从头做起，而是在现有成果的基础上做一些小小的调整，或者将已有的观点用比较新的方式组合起来。这种类型的工作很难用研究性的论文来表达。
例如，TDengine 的创始人陶建辉在《我为何要开发一个专用的物联网大数据平台，还开源它？》一文里提到时序数据库和消息队列的关系，
2008年，我创办和信，推送平台除推送之外，一个重要的模块就是消息队列。2009年，我们就研发了一个分布式高可靠、持久化存储的消息队列，每台手机需要推送的消息就放在一个队列里。消息队列与物联网的时序数据有区别吗？本质上没有。一个是非结构化的，一个是结构化的；一个是简单的进和出，但另外一个是需要有分析和计算的；两者在系统的架构设计上没有大的不同。
这就是典型的黑客思路，体现出对整个领域的把握。</description></item><item><title>HPC - MIC</title><link>https://lunarwhite.github.io/posts/guides/hpc-mic/</link><pubDate>Wed, 30 Jun 2021 10:38:49 +0000</pubDate><guid>https://lunarwhite.github.io/posts/guides/hpc-mic/</guid><description>1 初识与MIC 1.0 MIC应用模式 CPU原生模式 offload：CPU为主MIC为辅模式（最常用） CPU与MIC对等模式 MIC为主CPU为辅模式 native：MIC原生模式 1.1 offload, pi #include&amp;lt;stdio.h&amp;gt;#include&amp;lt;stdlib.h&amp;gt;#include&amp;lt;math.h&amp;gt; int main(){ float pi=0.0f; int count=10000; int i; #pragma offload target (mic) #pragma omp parallel for reduction(+:pi) for(i=0;i&amp;lt;count;i++){ float t=(float)((i+0.</description></item><item><title>Deeplearning introduction - Ⅱ</title><link>https://lunarwhite.github.io/posts/guides/dl-intro2/</link><pubDate>Thu, 24 Jun 2021 20:21:48 +0000</pubDate><guid>https://lunarwhite.github.io/posts/guides/dl-intro2/</guid><description>1 目标检测 1.1 简介 目标定位 目标检测 1.2 过程 全连接层转化成卷积层 卷积运算 用卷积实现滑动窗口检测 思路：首选确定一个矩形窗口——&amp;gt;然后将这个窗口按照一定的stride,遍历裁剪图片——&amp;gt;分别对每一张裁剪得到的图片，做图片分类 优点：共享权重参数，操作一次就可以完成，提高了整个算法的效率 缺点：边界框的位置可能不够准确 定义Label $[Pc,Bx,By,Bw,Bh,&amp;hellip;.</description></item><item><title>Deeplearning introduction - Ⅰ</title><link>https://lunarwhite.github.io/posts/guides/dl-intro1/</link><pubDate>Thu, 24 Jun 2021 20:20:48 +0000</pubDate><guid>https://lunarwhite.github.io/posts/guides/dl-intro1/</guid><description>1 简介 1.1 一种定义 P（Performance）来评估计算机程序在某类任务T（Task）上的性能，若一个程序通过利用经验E（Experience）在T中任务上获得了性能改善，则我们就说关于T和P，该程序对E进行了学习 1.2 一种划分 分类Classification 输出值离散 e.g. 根据光谱的形状，分类为恒星、星系或者其它 回归Regression 输出连续值 e.</description></item><item><title>COVID19 sentiment data analysis</title><link>https://lunarwhite.github.io/posts/assigns/ds-covid/</link><pubDate>Mon, 21 Jun 2021 11:12:00 +0000</pubDate><guid>https://lunarwhite.github.io/posts/assigns/ds-covid/</guid><description>本项目为数据结构课程设计的设计&amp;amp;开发文档
代码仓库在这里
1 引言 1.1 编写目的 公众情绪一直复杂多元，随着信息化程度的提高与大数据、人工智能等技术的不断普及又得以放大，让更多人的情感和想法得以在网络上得到表达与传播，传播范围比以往更大。新冠疫情于去年一月开始爆发，转眼间已经过去了一年多，疫情在国内得到了有效的控制。回顾这个过程，疫情下形成了特殊的网络社会心态和公众情绪。多元复杂的公众情绪，借助网络的力量传播和放大。但也方便了收集数据，并研究情绪变化的具体过程。
因此基于此次疫情，借助适宜的数据、分析手段和自然语言处理技术，希望在一定程度上了解新冠疫情这一特殊事件，在其自身不同发展阶段对中国大众心态的影响，以大数据技术研究中国大众的网络社会心态及其变化规律，进而形成引导公众情绪、维护社会稳定的参考性依据，或许有助于未来的类似事件的应对。
1.2 项目概述 以微博为代表的社交媒体上广泛的传播各种疫情信息，在疫情阶段发挥着比较重要的信息传输作用。本次作业的目的就是深入分析疫情信息中蕴含的网民情绪及其变化情况。以新冠肺炎疫情相关的短微博和相关新闻下的评论作为主要研究对象，首先爬取大量数据，利用心态词典方法可以大致观察心态演变，并结合层次聚类法从中分析网民关注热点，最后通过可视化方法展现相应的结果。
1.3 可行性分析 1）市场可行性：有助于平台运营人员乃至普通群众以可视化这种友好的交互方式分析、及时准确把握舆情变化，和不同阶段大众心态的影响。进而便于引导公众情绪、维护社会稳定，并对未来的类似突发事件的应对产生参考性意义。
2）技术可行性：数据源、数据量的支持，爬虫技术的成熟，机器学习尤其是自然语言处理方向发展如火如荼，文本情感分析技术趋于成熟，Python 有大量的可视化分析的第三方库，如pyecharts、matplotlib等。
1.4 术语和缩略语 [1] 聚类分析：聚类分析（英语：Cluster analysis）亦称为群集分析，是对于统计数据分析的一门技术，在许多领域受到广泛应用，包括机器学习，数据挖掘，模式识别，图像分析以及生物信息。聚类是把相似的对象通过静态分类的方法分成不同的组别或者更多的子集（subset），这样让在同一个子集中的成员对象都有相似的一些属性，常见的包括在坐标系中更加短的空间距离等。一般把数据聚类归纳为一种非监督式学习。</description></item><item><title>Classify food images using CNN with Keras</title><link>https://lunarwhite.github.io/posts/assigns/dl-food-classify/</link><pubDate>Thu, 03 Jun 2021 11:38:49 +0000</pubDate><guid>https://lunarwhite.github.io/posts/assigns/dl-food-classify/</guid><description># to be continue: # 1. resize smaller # 2. 归一化 # 3. 期望acc 40-70% import os import cv2 import matplotlib.</description></item><item><title>Tiny zhihu-like web - deploy doc</title><link>https://lunarwhite.github.io/posts/assigns/db-tiny-zh2/</link><pubDate>Tue, 01 Jun 2021 11:12:00 +0000</pubDate><guid>https://lunarwhite.github.io/posts/assigns/db-tiny-zh2/</guid><description>本项目为数据库课程设计的开发文档
设计文档在这里，代码仓库在这里
欢迎交流拍砖~
1 云服务器 1.1 连接 服务器信息 操作系统：Ubuntu Server 18.04 LTS 配置：标准型S5/1核/2GB/1Mbps 系统盘：高效云硬盘/50GB 1.</description></item><item><title>Tiny zhihu-like web - design doc</title><link>https://lunarwhite.github.io/posts/assigns/db-tiny-zh1/</link><pubDate>Mon, 03 May 2021 11:38:49 +0000</pubDate><guid>https://lunarwhite.github.io/posts/assigns/db-tiny-zh1/</guid><description>本项目为数据库课程设计的设计文档
开发文档在这里，代码仓库在这里
欢迎交流拍砖~
1 选题说明及需求介绍 1.1 选题说明 主要针对数据库编程的设计和实现。选择设计实现一个仿 「知乎」问答社区系统。今年三月，成立十周年的知乎在美国纽约交易所隆重上市。 知乎十年以来，知乎使用过的标语有：“认真你就赢了”、“我们 都是有问题的人”、“有问题，上知乎”和“有问题，就会有答案”等。可见，问题与答案是知乎的灵魂、是知乎的运营标准和产品定位。 1.2 需求介绍 知乎是知名的中文问答社区，连接各行各业的用户。人们普遍认为它是中文版的 Quora，高质量中文知识社区。用户分享着彼此的知识、经验和见 解，为中文互联网源源不断地提供多种多样的信息。准确地讲，知乎更像一个论坛：用户围绕着某一感兴趣的话题进行相关的讨论，同时可以关注兴趣一致 的人。对于概念性的解释，网络百科几乎涵盖了你所有的疑问；但是对于发散思维的整合，却是知乎的一大特色。 用户通过搜索、浏览其他用户的问题的回答，解决自己的一些问题，同时可以发布问题与回答，进行友好交流；同时，可以点赞你认可的回答与提问、关注用户，实现简易的社交功能。对于管理员可以进行内容审核，对论坛中一些不合法的信息进行删除，甚至可以封禁用户；对于积极输出某一专业知识领域的优质内容的友善用户，授予「优秀回答者」荣誉称号，鼓励用户创作。 2 系统的功能模块划分 2.</description></item><item><title>HPC - CUDA</title><link>https://lunarwhite.github.io/posts/guides/hpc-cuda/</link><pubDate>Sun, 02 May 2021 11:38:49 +0000</pubDate><guid>https://lunarwhite.github.io/posts/guides/hpc-cuda/</guid><description>1 初识与CUDA 1.0 基础概念 主机端-设备端（Host-Device） 内核函数（Kernel Function） 线程模型（Thread Model） 存储模型（Memory Model） 执行模型（CUDA Execution Model） GPU连接节点 ssh gpu01</description></item><item><title>HPC - OpenMP</title><link>https://lunarwhite.github.io/posts/guides/hpc-openmp/</link><pubDate>Fri, 30 Apr 2021 19:18:01 +0000</pubDate><guid>https://lunarwhite.github.io/posts/guides/hpc-openmp/</guid><description>1 初识与OpenMP 1.1 OpenMP基本结构 #include &amp;lt;stdlib.h&amp;gt;#include &amp;lt;omp.h&amp;gt;#include &amp;lt;stdio.h&amp;gt;#define NUM_THREADS 8 //设置线程数目为8 int main(){ //--串行区，由一个初始线程执行 static long num_steps=1000000000; double step; int i; double x,pi,sum=0.</description></item><item><title> Available GPU server in SDU</title><link>https://lunarwhite.github.io/posts/devtools/sdu-gpu/</link><pubDate>Sat, 24 Apr 2021 20:20:48 +0000</pubDate><guid>https://lunarwhite.github.io/posts/devtools/sdu-gpu/</guid><description>1 配置 1.1 注意 释放显存：手动重启jupyter/重启kernel 工作目录：/home/ubuntu/work 1.2 环境 操作系统：Ubuntu 框架：pytorch-gpu/tensorflow-gpu，连接直接使用 1.3 连接-Jupyter 默认：12345678 1.4 连接-SSH ssh ubuntu@&amp;lt;address&amp;gt; -p &amp;lt;port&amp;gt; 端口：IP地址冒号后-10000 用户名：ubuntu 默认：123456 1.</description></item><item><title>Deeplearning frameworks</title><link>https://lunarwhite.github.io/posts/guides/dl-frameworks/</link><pubDate>Sat, 24 Apr 2021 20:20:48 +0000</pubDate><guid>https://lunarwhite.github.io/posts/guides/dl-frameworks/</guid><description>1 SkLearn 1.1 参考 https://sklearn.apachecn.org/ https://scikit-learn.org/stable/user_guide.html 2 Keras 2.1 参考 https://keras.io/zh/ 2.2 损失函数 二分类 binary_crossentropy 多分类 categorical_crossentropy one-hot编码 sparse_categorical_crossentropy 数字编码 kullback_leibler_divergence hinge 多用于SVM categorical_hinge squared_hinge poisson 回归 mean_squared_error mean_absolute_error mean_absolute_percentage_error mean_squared_logarithmic_error logcosh cosine_proximity 2.</description></item><item><title>Logistic regression and validity analysis</title><link>https://lunarwhite.github.io/posts/assigns/dl-lr-va/</link><pubDate>Sat, 24 Apr 2021 11:38:49 +0000</pubDate><guid>https://lunarwhite.github.io/posts/assigns/dl-lr-va/</guid><description># 请用逻辑回归预测xtest对应的y值（梯度下降自己实现）。 # 并计算输出 accuracy，precision，recall，auc import numpy as np import matplotlib.pyplot as plt from sklearn.metrics import * xtrain = np.array([8., 3.</description></item><item><title> Available HPC server in SDU</title><link>https://lunarwhite.github.io/posts/devtools/sdu-hpc/</link><pubDate>Wed, 21 Apr 2021 20:20:48 +0000</pubDate><guid>https://lunarwhite.github.io/posts/devtools/sdu-hpc/</guid><description>1 配置 1.1 连接 ssh stu14@219.231.162.66 默认：a123456 1.2 系统信息 1个登录节点ln01 1个管理节点mu01 34个CPU节点cu01-cu34，队列名cu 2个GPU节点gpu01、gpu02，队列名gpu 2个mic节点mic01、mic02，队列名mic 1.3 环境变量 编辑配置文件 vi ~/.</description></item><item><title>Figure out the best aurgments using gradient descent - Ⅱ</title><link>https://lunarwhite.github.io/posts/assigns/dl-gd2/</link><pubDate>Sat, 17 Apr 2021 11:38:49 +0000</pubDate><guid>https://lunarwhite.github.io/posts/assigns/dl-gd2/</guid><description># 采用模型y=b+wx，试着用梯度下降算法求出最优参数 # 1.1 画出xdata，ydata的散点图 # 1.2 画出线性回归的函数图 # 2.1 画出b，w变化的图 # 1.在作业三基础上实现Adagrad # 2.在作业三基础上，画出损失函数随迭代次数的变化的图 import numpy as np import matplotlib.</description></item><item><title>Figure out the best aurgments using gradient descent - Ⅰ</title><link>https://lunarwhite.github.io/posts/assigns/dl-gd1/</link><pubDate>Sun, 11 Apr 2021 11:38:49 +0000</pubDate><guid>https://lunarwhite.github.io/posts/assigns/dl-gd1/</guid><description># 采用模型y=b+wx，试着用梯度下降算法求出最优参数 # 1.1 画出xdata，ydata的散点图 # 1.2 画出线性回归的函数图 # 2.1 画出b，w变化的图 import numpy as np import matplotlib.pyplot as plt # 给定 xdata, ydata, 都为 10 维长的数组 xdata = np.</description></item><item><title>Fit cicada frequency and temperature using linear regression</title><link>https://lunarwhite.github.io/posts/assigns/dl-lr-cicada/</link><pubDate>Sat, 03 Apr 2021 11:38:49 +0000</pubDate><guid>https://lunarwhite.github.io/posts/assigns/dl-lr-cicada/</guid><description>import numpy as np import matplotlib.pyplot as plt from sklearn import linear_model from sklearn.metrics import mean_squared_error # dataset xtrain = [8.</description></item><item><title>HPC - MPI</title><link>https://lunarwhite.github.io/posts/guides/hpc-mpi/</link><pubDate>Fri, 02 Apr 2021 18:18:49 +0000</pubDate><guid>https://lunarwhite.github.io/posts/guides/hpc-mpi/</guid><description>1 初识与MPI 1.1 hello-world #include&amp;#34;mpi.h&amp;#34;#include&amp;lt;stdio.h&amp;gt;#include&amp;lt;math.h&amp;gt;void main(int argc, char *argv[]){ // 相关变量声明 int numprocs; int procnum; int namelen; char pro_name[MPI_MAX_PROCESSOR_NAME]; // 初始化MPI环境 MPI_Init(&amp;amp;argc, &amp;amp;argv); // MPI程序体 MPI_Comm_rank(MPI_COMM_WORLD, &amp;amp;procnum); MPI_Comm_size(MPI_COMM_WORLD, &amp;amp;numprocs); MPI_Get_processor_name(pro_name, &amp;amp;namelen); printf(&amp;#34;Hello World!</description></item><item><title>Huffman encoding and decoding using Python and PyQt</title><link>https://lunarwhite.github.io/posts/assigns/ds-gui-huffman/</link><pubDate>Fri, 26 Mar 2021 20:50:38 +0000</pubDate><guid>https://lunarwhite.github.io/posts/assigns/ds-gui-huffman/</guid><description>1 要求 1.1 简介 初始化 (Initialization)：从终端读入n个字符，建立哈夫曼树； 编码 (Coding)：利用已建好的哈夫曼树，对字符进行编码，然后将正文编码结果存入文件codefile中； 译码 (Decoding)：利用已建好的哈夫曼树将文件codefile中的代码进行译码，结果存入文件textfile中。 1.2 思路 （待写 2 实现 2.1 环境 Python3.</description></item><item><title>Exploration and thinking on university education @Jinming Hu</title><link>https://lunarwhite.github.io/posts/thoughts/thoughts-about-edu/</link><pubDate>Wed, 17 Mar 2021 16:51:23 +0000</pubDate><guid>https://lunarwhite.github.io/posts/thoughts/thoughts-about-edu/</guid><description>原文链接
1 培养兴趣 学习并不是一件暂时的事情，不是到某个时候就可以停止了，而往往是一个终身的学习过程。而要保持这种终身学习的态度，首当其中的就是要保持对学习兴趣与热情。在我看来，学习可以而且应该是一件非常有趣的事情。
然而，现在的大学课程教育很多时候无聊又无用，大大消磨了学生们对于学习的兴趣与热情，认为学习就是这么痛苦而且困难的。一些老师拿着一套十年不改的课件，站上讲台就开始“自说自话”，丝毫不管下面学生的反应。更不必说这些课程的内容设计与教材往往颇具“中国特色”，都是什么xx计划xx规划的教材，而这些教材往往粗制滥造，不知所云，让学生们学得摸不着头脑，只以为是自己智商不够而受挫。最后，课程的评估再来个什么“分数正态分布”，什么“按排名给分数”，什么“字数越多分越高”，大大加剧学生们的内卷。看到我们聪明又努力的学生因为这些可笑的原因而把学习的热情与精力消磨在这些没什么意义的事情上，真令人痛心疾首！
2 认识自己 希腊德尔菲的阿波罗神庙里，刻着三句箴言，其中一句是“认识你自己”。所谓认识自己，在我看来包括：知道自己是一个什么样的人，知道自己的优点是什么、弱点是什么，知道自己想成为一个什么样的人，知道自己内心的渴望。
人生就像是在做数学中的优化一样，最重要的是找到自己的优化目标和约束条件，然后才能在满足约束条件的前提下去优化自己的目标。所谓的优化目标，就是自己内心的渴望，自己真正想奉献一生的事情；所谓约束条件，就是自己必须要满足的前提目标
而现在的大学教育，我似乎完全看不到对认识自己的强调，而同学们（包括我自己）也往往是有些麻木地顺着前人“成功”的轨迹，按部就班地刷着GPA、找着实习、去追求一份世俗意义上“成功”的工作；抑或是去找研究实习，去发表论文然后去读博士。有多少人是真正思考自己人生的目标，真正思考过自己是什么样的人的呢？又有多少学校与老师会去告诉学生认识自己的重要性呢？
在这里，我想告诉大家，认识自己是一件我们应该贯穿一生的事情。许多问题的答案，也许我们暂时还没法回答。但请大家将这些问题铭记于心。也许在将来的某时某刻，随着知识与实践的增加，我们会逐渐开始知道这些问题的答案；而也许这些答案，又会在将来的某时某刻被修正。这并不要紧，只要我们一直在保持着对认识自己的渴望，那就够了。
3 总结原因 为什么现在的课程质量不高呢？是不是老师的水平有差距呢？根据我的亲身实践，我认为最影响授课水平的，应该还是对授课的重视程度与备课情况。许多老师根本不认真备课，上课就只是应付学校的教学任务，那授课水平怎么可能高呢？
那为什么会是这样的情况呢？既然美国的大学课程的教学水平在我们之上，我们不妨来看看美国的情况，看看会有什么启发。实际上，在美国，无论是申请教职，还是申请终身教职（tenure），其中有很重要的一项就是teaching statement，即教学能力。绝大多数美国博士找教职的时候，都会给出自己当助教（TA）时的履历证明，而如果自己获得了什么“最受欢迎TA”荣誉的话，则会是找教职的一个很大的加分项。而所有助理教授(AP)几乎都需要承担教学任务，并且学生们会给AP的教学情况打分，学生的反馈的好坏极大程度上会影响AP升终身教职的成功与否，而教学能力较差的AP有时甚至会被一票否决。在这种情况下，美国大学的教授们一定会花大精力去提升自己的授课质量，因为事关自己的饭碗。
那中国的情况是什么呢？别说重要与否了，教学质量甚至不是教职评价体系中的一部分，而学校看重的只有经费、论文等等。同样的理由也适用于国内的研究生培养情况。研究生培养得究竟如何，很多导师根本不关心。学校和很多导师关心的只是这些研究生能带来多少论文，能做多少经费的项目等等&amp;hellip;&amp;hellip;在这种情况下，我们怎么能指望中国大学能提供好的课程与好的研究生指导资源呢？
4 未来展望 实际上，这几年来许多年轻的老师（尤其是一些从美国回来的老师）已开始登上中国大学教育的舞台，并开始努力贡献高质量的课程了。这是令人欣喜的变化，而且我相信这只是变化的开端。</description></item><item><title>Chrome and Edge</title><link>https://lunarwhite.github.io/posts/devtools/chrome-edge/</link><pubDate>Sat, 20 Feb 2021 12:55:08 +0000</pubDate><guid>https://lunarwhite.github.io/posts/devtools/chrome-edge/</guid><description>1 快捷键 1.1 Edge 参考链接-support.microsoft.
1 Ctrl + D 将当前选项卡另存为收藏夹 Ctrl + Shift + D 在新文件夹中将所有打开的标签页另存为收藏夹 Ctrl + H 在新标签页中打开“历史记录”(Web UI) Ctrl + J 在新标签页中打开“下载”(Web UI) Ctrl + Shift + Y 打开集合 Ctrl + M 将当前标签页设为静音（切换） 2 Alt + 向左键 返回 Alt + 向右键 前进 Ctrl + Tab 切换到下一个标签页 Ctrl + Shift + Tab 切换到上一个标签页 Ctrl + 1~8 切换到特定标签页 Ctrl + 9 切换到最后一个标签页 Ctrl + N 打开新窗口 Ctrl + Shift + N 打开新的 InPrivate 窗口 Ctrl + T 打开新标签页并切换到该标签页 Ctrl + Shift + T 重新打开上一个关闭的标签页并切换到该标签页 Ctrl + R 重新加载当前页 Ctrl + Shift + R 重新加载当前页，忽略缓存内容 Ctrl + W 关闭当前标签页 Ctrl + Shift + W 关闭当前窗口 3 空格键 向下滚动网页，一次滚动一个屏幕 Shift + 空格键 向上滚动网页，一次滚动一个屏幕 PgDn 向下滚动网页，一次滚动一个屏幕 PgUp 向上滚动网页，一次滚动一个屏幕 Home 键 转到页面顶部，将键盘焦点移动到窗格的第一项 End 转到页面底部，将键盘焦点移动到窗格的最后一项 Ctrl + 0 重置缩放级别 4 Ctrl + Enter 将 www.</description></item><item><title>Fight the dragon with infinite fun @skyzh</title><link>https://lunarwhite.github.io/posts/thoughts/fight-dragon/</link><pubDate>Sun, 31 Jan 2021 23:50:52 +0000</pubDate><guid>https://lunarwhite.github.io/posts/thoughts/fight-dragon/</guid><description>原文链接
很高兴，这学期的表演能让诸位卷不赢躺不平的同学感到难过，不得不使用真才实学取得高分，这是我的目的之一。
1 乱象 贵系一些同学，一边幻想着大作业要求能低一点，一边又用实际行动向老师证明大作业太简单。40 页报告，造火箭的实验内容，实在令我叹为观止。一些人认为，我在群里口嗨导致了作业难度的提升。但不要忘了，任课老师永远是按照平均水平来布置作业的。各位的平均水平都如此之高，大作业怎么会简单呢（笑
还有一些同学，手段高超，通过给老师发邮件的方式来影响他人的分数。我自然是不在意那一二十分的，但我还是想问：你心安理得吗？
某些同学以为自己的造假水平能蒙骗过一个世纪没写过代码的教授。但不要忘了，优秀作业是会被所有同学参考学习的。我一看到某课程的几份优秀作业，就发现了端倪。四份优秀作业，两份抄袭，一份造假，不愧是你系的学生！(更可笑的是不下两位数的人“复现”出了作假的结果，我不是很懂。）
某位同学一看事情比较大，就匆忙删掉了自己的 repo。互联网是有记忆的，你可以在我的 GitHub 账号下的 HallOfShame 项目中找到这些记录。
躺不平的朋友们不要阴阳怪气了。虚构创作、煽动对立，不解决任何问题。
这个问题下面终于出现了一些交大匿名社区无可奉告里的转帖。很高兴，这学期的表演能让诸位卷不赢躺不平的同学感到难过，不得不使用真才实学取得高分，这是我的目的之一。事实上，给成绩的分布、多少人挂科，学校都是有要求的。不论我（或是别的同学）如何操作，这一比例都无法被轻易改变。从我理想主义的角度来说，我确实做到了打破长久以来“比谁的页数更多”的潜规则，断绝了一种初级的“内卷”方法。
2 缘由 第一件比较失望的事情大概是对课程设计的失望。
体系结构实验，实验做的东西和上课讲的东西根本不在一个频道上。不知道该怎么吐槽了。 操作系统实验，是魔改 Linux 内核。老师就给个完成的目标有几点几点，具体怎么改让同学“自行搜索”。 操作系统、计算机组成、体系结构三门课完全脱节，没有整体感。一学期能看到的汇编就有三种：8086 汇编、MIPS 汇编、x86 汇编。恐怕以正常同学的水平还得纠结到底是 mov dst, src 还是 MOV SRC, DST 吧。 3 自述 我的背景大家估计也比较清楚。大一下看完了 CS:APP，大一暑假依葫芦画瓢照着 CA:AQA 写了 Tomasulo + Speculation 的 RISC-V 模拟器。大二上跟着 6.</description></item><item><title>File word retrieval and statistics using Python</title><link>https://lunarwhite.github.io/posts/assigns/ds-word-stat/</link><pubDate>Sat, 19 Dec 2020 19:48:51 +0000</pubDate><guid>https://lunarwhite.github.io/posts/assigns/ds-word-stat/</guid><description>1 要求 1.1 简介 给定一个文本文件，要求统计给定单词在文本中出现的总次数，并检索输出某个单词出现在文本中的行号、在该行中出现的次数以及位置。
1.2思路 可以分为主控菜单程序和另外三个部分实现：
零、主控菜单程序 (1) 头文件包含 (2) 菜单选项包括 建立文件 单词计数 单词定位 退出程序 (3) 选择1-4执行相应的操作，其他字符为非法 一、建立一个文本文件，文件名由用户用键盘输入 实现过程 (1) 定义一个串变量 (2) 定义文本文件 (3) 输入文件名，打开该文件 (4) 循环读入文本行，写入文本文件 (5) 关闭文件 二、给定单词计数，输入一个不含空格的单词，统计输出该单词在文本中的出现次数 实现设计 要用到模式匹配算法，逐行扫描文本文件。匹配一个，计数器加1，直到整个文件扫描结束；然后输出单词出现的次数 朴素模式匹配算法的基本思路是将给定字串与主串从第一个字符开始比较，找到首次与子串完全匹配的子串为止，并记住该位置。 但为了实现统计子串出现的个数，不仅需要从主串的第一个字符位置开始比较，而且需要从主串的任一位置检索匹配字符串。 实现过程 (1) 输入要检索的文本文件名，打开相应的文件 (2) 输入要检索统计的单词 (3) 循环读文本文件，读入一行，将其送入定义好的串中，并求该串的实际长度，调用串匹配函数进行计数 (4) 关闭文件，输出统计结果 三、检索给定单词，输入一个单词，检索并输出该单词所在的行号、该行中出现的次数以及在该行中的相应位置。 实现设计 同上一个设计类似，但是要相对复杂一些 实现过程 (1) 输入要检索的文本文件名，打开相应的文件 (2) 输入要检索统计的单词 (3) 循环读文本文件，读入一行，将其送入定义好的串中，并求该串的实际长度。行计数器置初值0，调用串匹配函数进行计数。如果 行单词计数器!</description></item><item><title>How to interview a person for two years @mindhacks</title><link>https://lunarwhite.github.io/posts/thoughts/two-years-interview/</link><pubDate>Mon, 16 Nov 2020 23:07:58 +0000</pubDate><guid>https://lunarwhite.github.io/posts/thoughts/two-years-interview/</guid><description>原文链接
书单+GitHub，就相当于一个两年左右的面试。没有什么面试比持续两年的面试更具有信息量。你提前两年就开始面试和培养未来的候选者，而且还不需要你花出一分精力，而且人家还很乐意，没有比这更完美的面试了。
1 痛点 最好的人也许不投简历，就决定去哪里了。所以要在他们做决定前找到他们。
比较差的会投很多次简历，找不到工作的时间越多，投的简历越多，给整个pool 带来很多噪音，top10%的简历也许根本不算全部人的top10%。
现在绝大多数应届简历而言，也许最具信息量的部分不是“精通XXX，熟悉YYY，掌握ZZZ”，不是“在UUU实习过”，也不是这个项目那个作业，反倒是越来越被认为不重要的一项：毕业学校。
毕业学校本不应该是最具信息量的，它之所以最具信息量只是源于一个悲剧的事实：简历上其他条目实在信息量太少了。所以靠谱的面试者往往学会了无视简历上华而不实的内容，只相信面试的时候亲眼所见，扫两眼简历也就罢了，最后还得自己捋起袖子慢慢面。
2 Book-List 我一向认为，很多时候，是否好好看完一本好书，对一个人的提升往往能达到质的区别。就算不好好看完一本好书，马马虎虎看完，只要书是真的好书，也肯定会有很大的提高。
我在面试的时候就经常询问对方看过哪些技术书籍，经常上哪些网站，订哪些博客。这里头尤其数书籍这一项的区分度最高。
我们姑且把这个计划叫做“书单计划”，容易看到“书单计划”具备以下几个卓越的优点：
清晰、明确。完全可度量。 防伪：读没读过，随便一问便知。 不在乎是否“泄题”：书单完全公开的，无所谓，本来就是要你去读的。想背题？背书吧。真能背下来说明认真看了。 管你用心不用心读，只要读了，读完了，就有区别。真正的好书，你想不被吸引都难。据我观察很多人就是不知道该去读什么书。 不存在“怎么做”的障碍：所有人都知道怎么读书——一页一页读。 不需要招聘者投入精力：书单在此，就这么简单，您看着办。 评估的负担很大程度转移到了应聘者的身上：是不是认真看完了，有没有心得体会，您自己掂量。没看完别来找我们。 “书单计划”能很大程度上起到强鉴别器的作用，看了就是看了，必然能学到东西，没看就是没看。知道和不知道，区别是本质的。</description></item><item><title>MySQL</title><link>https://lunarwhite.github.io/posts/guides/mysql/</link><pubDate>Thu, 05 Nov 2020 17:08:43 +0000</pubDate><guid>https://lunarwhite.github.io/posts/guides/mysql/</guid><description>1 常用命令 #start net start mysql #stop net stop mysql 2 测试脚本 新建 studentdb.sql 如下 /* Source Host : localhost:3306 Source Database : studentdb Target Server Type : MYSQL Target Server Version : 50642 File Encoding : 65001 */SETFOREIGN_KEY_CHECKS=0;-- ---------------------------- -- Table structure for `stuscore` -- ---------------------------- DROPTABLEIFEXISTS`stuscore`;CREATETABLE`stuscore`(`id`varchar(6)NOTNULL,`name`varchar(8)DEFAULTNULL,`gender`varchar(2)DEFAULTNULL,`score`int(3)DEFAULTNULL,PRIMARYKEY(`id`))ENGINE=InnoDBDEFAULTCHARSET=utf8;-- ---------------------------- -- Records of stuscore -- ---------------------------- INSERTINTO`stuscore`VALUES(&amp;#39;600001&amp;#39;,&amp;#39;宋皓宇&amp;#39;,&amp;#39;男&amp;#39;,&amp;#39;71&amp;#39;);INSERTINTO`stuscore`VALUES(&amp;#39;620395&amp;#39;,&amp;#39;张一弛&amp;#39;,&amp;#39;男&amp;#39;,&amp;#39;88&amp;#39;);INSERTINTO`stuscore`VALUES(&amp;#39;800001&amp;#39;,&amp;#39;贺楠苏&amp;#39;,&amp;#39;男&amp;#39;,&amp;#39;86&amp;#39;);INSERTINTO`stuscore`VALUES(&amp;#39;800002&amp;#39;,&amp;#39;张梓煜&amp;#39;,&amp;#39;男&amp;#39;,&amp;#39;83&amp;#39;);INSERTINTO`stuscore`VALUES(&amp;#39;800003&amp;#39;,&amp;#39;徐坤&amp;#39;,&amp;#39;男&amp;#39;,&amp;#39;76&amp;#39;);INSERTINTO`stuscore`VALUES(&amp;#39;800004&amp;#39;,&amp;#39;王茂赟&amp;#39;,&amp;#39;男&amp;#39;,&amp;#39;65&amp;#39;);INSERTINTO`stuscore`VALUES(&amp;#39;800005&amp;#39;,&amp;#39;卢爽&amp;#39;,&amp;#39;女&amp;#39;,&amp;#39;67&amp;#39;);INSERTINTO`stuscore`VALUES(&amp;#39;800007&amp;#39;,&amp;#39;李长烨&amp;#39;,&amp;#39;男&amp;#39;,&amp;#39;55&amp;#39;);INSERTINTO`stuscore`VALUES(&amp;#39;800008&amp;#39;,&amp;#39;马馨竹&amp;#39;,&amp;#39;女&amp;#39;,&amp;#39;98&amp;#39;);INSERTINTO`stuscore`VALUES(&amp;#39;800009&amp;#39;,&amp;#39;王梓铭&amp;#39;,&amp;#39;男&amp;#39;,&amp;#39;92&amp;#39;);INSERTINTO`stuscore`VALUES(&amp;#39;800010&amp;#39;,&amp;#39;孙健恺&amp;#39;,&amp;#39;男&amp;#39;,&amp;#39;100&amp;#39;);INSERTINTO`stuscore`VALUES(&amp;#39;800011&amp;#39;,&amp;#39;赵雨萱&amp;#39;,&amp;#39;女&amp;#39;,&amp;#39;33&amp;#39;);INSERTINTO`stuscore`VALUES(&amp;#39;800012&amp;#39;,&amp;#39;李明睿&amp;#39;,&amp;#39;男&amp;#39;,&amp;#39;56&amp;#39;);INSERTINTO`stuscore`VALUES(&amp;#39;800013&amp;#39;,&amp;#39;程云杨&amp;#39;,&amp;#39;男&amp;#39;,&amp;#39;79&amp;#39;);INSERTINTO`stuscore`VALUES(&amp;#39;800014&amp;#39;,&amp;#39;李可欣&amp;#39;,&amp;#39;女&amp;#39;,&amp;#39;83&amp;#39;);INSERTINTO`stuscore`VALUES(&amp;#39;800015&amp;#39;,&amp;#39;李闻天&amp;#39;,&amp;#39;男&amp;#39;,&amp;#39;78&amp;#39;);INSERTINTO`stuscore`VALUES(&amp;#39;800016&amp;#39;,&amp;#39;何朝旭&amp;#39;,&amp;#39;男&amp;#39;,&amp;#39;88&amp;#39;);INSERTINTO`stuscore`VALUES(&amp;#39;800017&amp;#39;,&amp;#39;杨章驰&amp;#39;,&amp;#39;男&amp;#39;,&amp;#39;89&amp;#39;);INSERTINTO`stuscore`VALUES(&amp;#39;800018&amp;#39;,&amp;#39;张浩阳&amp;#39;,&amp;#39;男&amp;#39;,&amp;#39;83&amp;#39;);INSERTINTO`stuscore`VALUES(&amp;#39;800019&amp;#39;,&amp;#39;尹丹彤&amp;#39;,&amp;#39;女&amp;#39;,&amp;#39;76&amp;#39;);INSERTINTO`stuscore`VALUES(&amp;#39;800020&amp;#39;,&amp;#39;孟鸽&amp;#39;,&amp;#39;女&amp;#39;,&amp;#39;91&amp;#39;);INSERTINTO`stuscore`VALUES(&amp;#39;800021&amp;#39;,&amp;#39;吴昌鸿&amp;#39;,&amp;#39;男&amp;#39;,&amp;#39;82&amp;#39;);INSERTINTO`stuscore`VALUES(&amp;#39;800022&amp;#39;,&amp;#39;耿嘉辉&amp;#39;,&amp;#39;男&amp;#39;,&amp;#39;70&amp;#39;);INSERTINTO`stuscore`VALUES(&amp;#39;800023&amp;#39;,&amp;#39;梁鹤飞&amp;#39;,&amp;#39;男&amp;#39;,&amp;#39;64&amp;#39;);INSERTINTO`stuscore`VALUES(&amp;#39;800024&amp;#39;,&amp;#39;李腾飞&amp;#39;,&amp;#39;男&amp;#39;,&amp;#39;55&amp;#39;);INSERTINTO`stuscore`VALUES(&amp;#39;800025&amp;#39;,&amp;#39;张岩&amp;#39;,&amp;#39;女&amp;#39;,&amp;#39;61&amp;#39;);INSERTINTO`stuscore`VALUES(&amp;#39;800026&amp;#39;,&amp;#39;曾永泽&amp;#39;,&amp;#39;男&amp;#39;,&amp;#39;78&amp;#39;);INSERTINTO`stuscore`VALUES(&amp;#39;800027&amp;#39;,&amp;#39;何毅辉&amp;#39;,&amp;#39;男&amp;#39;,&amp;#39;70&amp;#39;);INSERTINTO`stuscore`VALUES(&amp;#39;800028&amp;#39;,&amp;#39;庄伯语&amp;#39;,&amp;#39;男&amp;#39;,&amp;#39;59&amp;#39;);INSERTINTO`stuscore`VALUES(&amp;#39;800029&amp;#39;,&amp;#39;许艺帆&amp;#39;,&amp;#39;男&amp;#39;,&amp;#39;80&amp;#39;);INSERTINTO`stuscore`VALUES(&amp;#39;800030&amp;#39;,&amp;#39;赫明佳&amp;#39;,&amp;#39;女&amp;#39;,&amp;#39;47&amp;#39;);INSERTINTO`stuscore`VALUES(&amp;#39;800031&amp;#39;,&amp;#39;申亦轩&amp;#39;,&amp;#39;女&amp;#39;,&amp;#39;56&amp;#39;);INSERTINTO`stuscore`VALUES(&amp;#39;800610&amp;#39;,&amp;#39;袁立钊&amp;#39;,&amp;#39;男&amp;#39;,&amp;#39;79&amp;#39;);INSERTINTO`stuscore`VALUES(&amp;#39;810235&amp;#39;,&amp;#39;刘晓奇&amp;#39;,&amp;#39;男&amp;#39;,&amp;#39;78&amp;#39;);</description></item><item><title>SQL</title><link>https://lunarwhite.github.io/posts/guides/sql/</link><pubDate>Fri, 30 Oct 2020 20:21:48 +0000</pubDate><guid>https://lunarwhite.github.io/posts/guides/sql/</guid><description>1 建表添加约束 not null primary key foreign key auto_increment default (e.g. getdate()) check (e.g. value)</description></item><item><title>Java</title><link>https://lunarwhite.github.io/posts/guides/java/</link><pubDate>Wed, 30 Sep 2020 20:21:48 +0000</pubDate><guid>https://lunarwhite.github.io/posts/guides/java/</guid><description>1 命名规范 package/project: hellojava class: MyPeople variable value/method: myAge, getGender() constant value: TEMP_PI</description></item><item><title>Quit QHNU @himself65</title><link>https://lunarwhite.github.io/posts/thoughts/quit-qhnu/</link><pubDate>Sun, 06 Sep 2020 10:08:27 +0000</pubDate><guid>https://lunarwhite.github.io/posts/thoughts/quit-qhnu/</guid><description>原文链接
1 不满 绝大部分人以为考一个好大学，就可以学到无数的知识，就可以学到烂大学所学不到的知识。 至少我高中同龄人都是这么认为，其他的大都是父母逼迫考一个好大学， 但是我在我高中时候我就不这么认为。
那时起便或多或少开始混社交平台， 听到一些知名大学学长学姐喷自己学校的CS专业课考的都是什么鬼东西。 因为我那时候水平也还说得过去，所以看到这些无聊的试题甚至开始怀疑名牌大学连这种无聊问题都得拿出来考吗？
于是我那时起便越来越不在乎考一个名牌大学会对自己编程技术有什么本质性提高。至少我的梦想和考名牌大学，没有什么必然关系，所以当时我决定不像别人一样，追求别人所追求或被迫追求的虚幻的东西。
所以之后反过来我看一些高考生，抱着“考一个好大学就会学好知识”这种牛头不对马嘴的想法产生了生理厌恶，高二那会儿我的编程水平已经略有水平了， 有同班同学以一种“我考了985之后学一年就可以吊打你”这样的想法对我不屑一顾。当然我也不想理会他，因为我发现和一个思维不在一个平面的人交流是有多么费劲。
如果一个人把政策评分作为自己的至高追求，那么他就是这个政策的牺牲品。这对于一个对大学充满向往的高考生来说是一个梦想的破灭，当然对我当年来说也是。
2 放纵 于是高三边开始放飞自我了，我还记得班主任要求每个学生每周末都得去班主任租的出租屋上自习课， 说是自习课，去了之后便开始人手一张卷子。 嫌太热，老师说没有空调，美其名曰磨练意志。老师看到我们开始学习后，有时候便心满意足的回家了，这时我们便开始各干各的事情，有的聊天，有的刷手机， 有时候我拿着一本计算机书，自顾自的看了起来。
所以之后我也再也不去所谓的自习课了，老师很生气，还让我妈签保证书，内容是保证不上自习课也能管理好自己学习。我妈问我，你能管好自己的学习？我尴尬回答，当然能管好“学习”。</description></item><item><title>First try in SwitchyOmega and shadowsocks</title><link>https://lunarwhite.github.io/posts/devtools/so-ss/</link><pubDate>Thu, 20 Aug 2020 08:06:12 +0000</pubDate><guid>https://lunarwhite.github.io/posts/devtools/so-ss/</guid><description>GFW 确实影响了日常，记录踩坑以备不时之需
1 SS 账号 youneed.win free-ss Share-SSR-V2ray 2 SO 配置 chrome-setup-guide</description></item><item><title>Book list for a swe</title><link>https://lunarwhite.github.io/posts/thoughts/booklistdnb/</link><pubDate>Thu, 13 Aug 2020 18:23:32 +0000</pubDate><guid>https://lunarwhite.github.io/posts/thoughts/booklistdnb/</guid><description>1 Will null 2 Done null</description></item><item><title>DNS cache poisoning problem in GitHub.com</title><link>https://lunarwhite.github.io/posts/devtools/dns-github/</link><pubDate>Mon, 13 Jul 2020 21:20:01 +0000</pubDate><guid>https://lunarwhite.github.io/posts/devtools/dns-github/</guid><description>0 update 目前来看，用SwitchHosts统一管理或许是更佳选择 1 查询ip 查询地址： ipaddress 需要查询： http://github.com/ http://assets-cdn.github.com/ http://github.global.ssl.fastly.net/ 2 修改host 输入命令： sudo notepad C:\Windows\System32\drivers\etc\hosts 形式如下： 140.</description></item><item><title>C++</title><link>https://lunarwhite.github.io/posts/guides/cpp/</link><pubDate>Sat, 06 Jun 2020 20:21:48 +0000</pubDate><guid>https://lunarwhite.github.io/posts/guides/cpp/</guid><description>1 基础语法 1.1 输入输出 ⽤cin读⼊字符串的时候，是以空格为分隔符的，如果想要读⼊⼀整⾏的字符串，就需要⽤getline string s; getline(cin,s); //读取⼀⾏的字符串，包括空格 cout&amp;lt;&amp;lt;s.length(); //输出字符串s的⻓度 换行\n和endl有区别，后者输出一个换行符，并立即刷新缓冲区，使得栈中的东西刷新一次。过多的 endl 是影响程序执行效率低下的因素之一。 &amp;quot; &amp;quot; &amp;lt; &amp;gt;头文件也有区别，前者优先在本地目录下找，找不到再去系统目录。 cout多行时，正确姿势： cout&amp;lt;&amp;lt;&amp;#34;Forst line there.</description></item><item><title>MobaXterm</title><link>https://lunarwhite.github.io/posts/devtools/mobaxterm/</link><pubDate>Wed, 13 May 2020 22:53:58 +0000</pubDate><guid>https://lunarwhite.github.io/posts/devtools/mobaxterm/</guid><description>1 设置 1.1 具体选项 选中复制，右键粘贴：Settings &amp;ndash;&amp;gt; Configuration &amp;ndash;&amp;gt; Terminal , 然后打勾选中 字体、背景 设置：Settings &amp;ndash;&amp;gt; Configuration &amp;ndash;&amp;gt; Terminal 取消自动连接SFTP：settings &amp;ndash;&amp;gt; Configuration，在弹出的对话框中选择 SSH，再将automaticall switch to SSH-browser tab after login前面的对勾去掉</description></item><item><title>Windows terminal</title><link>https://lunarwhite.github.io/posts/devtools/win-terminal/</link><pubDate>Wed, 13 May 2020 22:53:58 +0000</pubDate><guid>https://lunarwhite.github.io/posts/devtools/win-terminal/</guid><description>千呼万唤始出来，微软自家也有能称得上是terminal的terminal了
1 参考 官方文档 2 注意 确保添加bash到path 获取 guid 获取 icon(256*256) Powershell：background1 background2 Windows：background1 background2 Git-Bash：background1 background2 icon1 Ubuntu：background1 icon1 Linux：background1 background2 background3 3 添加到右键菜单 Windows Registry Editor Version 5.</description></item><item><title>Eclipse IED settings for Java</title><link>https://lunarwhite.github.io/posts/devtools/eclipse-java/</link><pubDate>Sun, 10 May 2020 17:13:00 +0000</pubDate><guid>https://lunarwhite.github.io/posts/devtools/eclipse-java/</guid><description>1 全局配置 代码自动补全 Window -&amp;gt; Perferences -&amp;gt; Java -&amp;gt; Editor -&amp;gt; Content Assist 在Auto Activation 段中设置 Auto activation triggers for Java .</description></item><item><title>Python</title><link>https://lunarwhite.github.io/posts/guides/python/</link><pubDate>Thu, 30 Apr 2020 20:21:48 +0000</pubDate><guid>https://lunarwhite.github.io/posts/guides/python/</guid><description>1 算数运算 乘法：3**2 Log(A) 其中A为0的情况会报警告。 定义一个epsilon=1e-8，np.log(A + epsilon) 2 数据类型 2.1 基本 type函数：type(12.3) 2.</description></item><item><title>Conda</title><link>https://lunarwhite.github.io/posts/guides/conda/</link><pubDate>Sun, 12 Apr 2020 17:07:05 +0000</pubDate><guid>https://lunarwhite.github.io/posts/guides/conda/</guid><description>1 基本环境 1.1 检查pip python -m ensurepip python -m pip install --upgrade pip 1.2 换镜像源 conda config --add channels https://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/free conda config --add channels https://mirrors.</description></item><item><title>Git</title><link>https://lunarwhite.github.io/posts/guides/git/</link><pubDate>Thu, 12 Mar 2020 20:20:48 +0000</pubDate><guid>https://lunarwhite.github.io/posts/guides/git/</guid><description>1 参考 2 常用 # 撤销 git reset --soft HEAD^</description></item><item><title>VSCode</title><link>https://lunarwhite.github.io/posts/devtools/vscode/</link><pubDate>Thu, 02 Jan 2020 17:04:16 +0000</pubDate><guid>https://lunarwhite.github.io/posts/devtools/vscode/</guid><description>拥抱开源，visual studio code简直就是开发利器、宇宙第一editor，尤其是众多开源的extension，让vscode始终充满活力。本文记录了不同语言下vscode的基本配置和全局快捷键，希望能最大效度利用好此工具，happy hacking，happy coding
1 全局配置 登录账号同步 删除自带theme 2 添加到右键菜单 Windows Registry Editor Version 5.00 [HKEY_CURRENT_USER\Software\Classes\*\shell\Open with &amp;amp;Code] @=&amp;#34;Open with Code&amp;#34; &amp;#34;Icon&amp;#34;=&amp;#34;C:\\Users\\mewin\\scoop\\apps\\vscode\\current\\Code.</description></item><item><title>Windows basic development environment deploy</title><link>https://lunarwhite.github.io/posts/devtools/dev-win/</link><pubDate>Tue, 17 Dec 2019 17:02:13 +0000</pubDate><guid>https://lunarwhite.github.io/posts/devtools/dev-win/</guid><description>拿到一台新的Windows开发用电脑需做的几件小事
1 host-win 设置 流量计费的连接 电源计划 文件夹系统 服务 WIN+R: services.msc 本地服务 Connected User Experiences and Telemetry microsoft compatibility telemetry windows search xbox 还原点 安装软件 VMware-Player scoop 2 vm-win 创建 PRO：4G/64G/4 HME：2G/32G/2 关闭3D/USB3.</description></item><item><title>Install linux in vmware virtual machine</title><link>https://lunarwhite.github.io/posts/devtools/vm-linux/</link><pubDate>Fri, 29 Nov 2019 16:59:56 +0000</pubDate><guid>https://lunarwhite.github.io/posts/devtools/vm-linux/</guid><description>本文简单介绍了Linux基本的开发环境配置，基于VMware虚拟机，搭配Ubuntu LTS，借助ssh工具和host机联络，比较舒适
1 安装部署 创建 2G/16G/2 关闭3D/USB3.1/虚拟化/移除打印机 xx72/LA/vmlnx/xx 安装VMTool # extract here # open in terminal # root sudo su # install .</description></item><item><title>scoop: command-line package manager for Windows</title><link>https://lunarwhite.github.io/posts/devtools/win-scoop/</link><pubDate>Wed, 20 Nov 2019 16:58:13 +0000</pubDate><guid>https://lunarwhite.github.io/posts/devtools/win-scoop/</guid><description>众所周知，Windows 下进行开发多少有点反人类，环境配置和 macos/linux 相比，简直就是灾难。索性有人开源了一系列包管理工具，scoop/chocolatey/winget，对比之下，选择了 scoop，体验良好，写一文向大家安利。
必要性 如果用过 macOS 或者 Linux 的朋友，或多或少都听说过包管理工具。通过包管理工具，你可以直接在终端中快速自动地安装、配置、卸载和升级软件，而无需通过 GUI 页面一步步手动安装下载软件。这非常适合一次性安装非常多软件，大大地节约了软件安装所需要的时间和步骤，同时也在一定程度上确保了来源软件的安全性
Windows下三大包管理工具，scoop/winget/chocolatey 降低安装维护软件的成本 避免安装大量软件造成的路径污染 不必查找和安装软件的其他依赖项 避免捆绑和垃圾软件 彻底地卸载 环境部署 set-executionpolicy remotesigned -scope currentuser iex (new-object net.</description></item><item><title>What I care about when choosing electronic devices</title><link>https://lunarwhite.github.io/posts/thoughts/tech-device-selection/</link><pubDate>Thu, 31 Oct 2019 18:30:38 +0000</pubDate><guid>https://lunarwhite.github.io/posts/thoughts/tech-device-selection/</guid><description>1 Phone 电量：续航＋快充 便携：重量 视力：是否频闪+屏幕大小 信号 散热 2 Laotop 电量：续航＋快充 便携：重量 性能：AMD+内存 16G 空间：固态 512G 接口：HDMI+网线+USB3.0+&amp;hellip; 视力：是否频闪+屏幕大小 信号：wifi-6 散热 背光 屏占比 3 Keyboard 便携：重量 场合：静音 卫生：键帽 电量：续航 背光</description></item><item><title>About</title><link>https://lunarwhite.github.io/about/</link><pubDate>Sat, 12 Oct 2019 00:00:00 +0000</pubDate><guid>https://lunarwhite.github.io/about/</guid><description>Hi, there👋, this is lunarwhite. I come from Jinan, &amp;ldquo;the Spring City&amp;quot;💦, a traditional city in Shandong province, which is Known for its spring water.</description></item><item><title>Pick meaningful words in books</title><link>https://lunarwhite.github.io/posts/thoughts/interesting-words-in-book/</link><pubDate>Tue, 13 Aug 2019 18:23:32 +0000</pubDate><guid>https://lunarwhite.github.io/posts/thoughts/interesting-words-in-book/</guid><description>海恩法则 指出：每一起严重事故的背后，必然有29次轻微事故和300起未遂先兆以及1000起事故隐患。 强调两点：一是事故的发生是量的积累的结果；二是再好的技术，再完美的规章，在实际操作层面，也无法取代人自身的素质和责任心。 庞氏游戏 对金融领域投资诈骗的称呼，是金字塔骗局（Pyramid scheme）的始祖。 很多非法的传销集团就是用这一招聚敛钱财。又称“拆东墙补西墙”“空手套白狼”。简言之就是利用新投资人的钱来向老投资者支付利息和短期回报，以制造赚钱的假象进而骗取更多的投资。 后真相 事实真相是什么不再重要，人们对事件所产生的情绪的关注超过了事实本身。 真相衰退 权威机构的公信力丧失，人们的信息来源变窄，有相同观点的人聚在一起，拒绝对真正的问题展开的讨论。 猫狗定律 路上有只猫和狗，你说你见到了一只狗，你并没说错，但你却忽视了一只猫。</description></item></channel></rss>