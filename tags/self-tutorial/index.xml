<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>self-tutorial on lunarwhite</title><link>https://lunarwhite.github.io/tags/self-tutorial/</link><description>Recent content in self-tutorial on lunarwhite</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><copyright>© lunarwhite</copyright><lastBuildDate>Wed, 30 Jun 2021 10:38:49 +0000</lastBuildDate><atom:link href="https://lunarwhite.github.io/tags/self-tutorial/index.xml" rel="self" type="application/rss+xml"/><item><title>HPC - MIC</title><link>https://lunarwhite.github.io/posts/guides/hpc-mic/</link><pubDate>Wed, 30 Jun 2021 10:38:49 +0000</pubDate><guid>https://lunarwhite.github.io/posts/guides/hpc-mic/</guid><description>1 初识与MIC 1.0 MIC应用模式 CPU原生模式 offload：CPU为主MIC为辅模式（最常用） CPU与MIC对等模式 MIC为主CPU为辅模式 native：MIC原生模式 1.1 offload, pi #include&amp;lt;stdio.h&amp;gt;#include&amp;lt;stdlib.h&amp;gt;#include&amp;lt;math.h&amp;gt; int main(){ float pi=0.0f; int count=10000; int i; #pragma offload target (mic) #pragma omp parallel for reduction(+:pi) for(i=0;i&amp;lt;count;i++){ float t=(float)((i+0.5f)/count); pi+=4.0f/(1.0f+t*t); } pi/=count; printf(&amp;#34;PI=%f\n&amp;#34;,pi); return 0; } icc -openmp 6-1.c -o 6-1.out -limf -lm ./6-1.out 1.2 offload, in #include&amp;lt;stdio.h&amp;gt;#include&amp;lt;stdlib.h&amp;gt;#include&amp;lt;math.h&amp;gt;#define LEN (10) int main(){ float* arr; int i; arr=(float*)malloc(LEN*sizeof(float)); for(i=0;i&amp;lt;LEN;++i){ arr[i]=i; } i=0; #pragma offload target(mic) in(arr:length(LEN)) for(i=0;i&amp;lt;LEN;++i){ printf(&amp;#34;on mic: arr[%d]=%f\n&amp;#34;,i,arr[i]); arr[i]=0; } for(i=0;i&amp;lt;LEN;++i){ printf(&amp;#34;on cpu: arr[%d]=%f\n&amp;#34;,i,arr[i]); } return 0; } icc 6-2.</description></item><item><title>Deeplearning introduction - Ⅱ</title><link>https://lunarwhite.github.io/posts/guides/dl-intro2/</link><pubDate>Thu, 24 Jun 2021 20:21:48 +0000</pubDate><guid>https://lunarwhite.github.io/posts/guides/dl-intro2/</guid><description>1 目标检测 1.1 简介 目标定位 目标检测 1.2 过程 全连接层转化成卷积层 卷积运算 用卷积实现滑动窗口检测 思路：首选确定一个矩形窗口——&amp;gt;然后将这个窗口按照一定的stride,遍历裁剪图片——&amp;gt;分别对每一张裁剪得到的图片，做图片分类 优点：共享权重参数，操作一次就可以完成，提高了整个算法的效率 缺点：边界框的位置可能不够准确 定义Label $[Pc,Bx,By,Bw,Bh,&amp;hellip;..]$ $bx, by$：相对于单个小方格的位置，一定是$[0,1]$ $bh, bw$：相对于单个小方格边长的长度，可能$&amp;gt;1$ Bounding-Box预测 将原图像划分为$n∗n$个小格 对于每一个对象，在标注的时候分析出其中点$b_x, b_y$，然后将这个对象的中点分配到对应的小格子中。因此一个对象最多被分配到一个小格子中 于每一个小格子，输出将是一个$5+K$的向量，$K$为类别数量 IoU交并比（集合概念） 预测的边框，和真实的边框，的交集和并集的比值 衡量两个框重合的程度，=1完全重合，&amp;gt;=0.5可接受的 非极大值抑制 防止一个物体被多次检验 首先去除$Pc$小于某个置信度的bounding box。然后 while true：找到当前的$Pc$最大的bounding box，去除所有与其IoU超过阈值的bounding box 如果有多种类物体待检验，则应该对每种类别单独进行一次非极大值抑制 如果一个bounding box内部有多个物品，则应该设置更小的bounding box Anchor-Boxes 让一个格检测出多个对象，需手动设置，或者kmeans自学习 2 YOLOv1 2.</description></item><item><title>Deeplearning introduction - Ⅰ</title><link>https://lunarwhite.github.io/posts/guides/dl-intro1/</link><pubDate>Thu, 24 Jun 2021 20:20:48 +0000</pubDate><guid>https://lunarwhite.github.io/posts/guides/dl-intro1/</guid><description>1 简介 1.1 一种定义 P（Performance）来评估计算机程序在某类任务T（Task）上的性能，若一个程序通过利用经验E（Experience）在T中任务上获得了性能改善，则我们就说关于T和P，该程序对E进行了学习 1.2 一种划分 分类Classification 输出值离散 e.g. 根据光谱的形状，分类为恒星、星系或者其它 回归Regression 输出连续值 e.g. 根据光谱的形状，估计恒星的温度 聚类Clustering 把相似的记录聚在一起，不需要标签 e.g. 对获得天体光谱聚类，相似的光谱被聚在同一组 1.3 三要素 数据、算法和模型 1.4 大致步骤 1 Define a Model 2 Goodness of Function 3 Pick the Best Function: Gradient decent 1.5 难点 调用算法得出了准确率？ 模型搭建过程以及评价指标算的是对的？ 模型选择，并且能说明模型选的合适？ 评价指标是不是符合真正的需求？ 训练集是否覆盖全面？ 数据里面有没有错误值、错误标签影响到了结果？ 获得的模型能真正用于实际应用？ 把过程进行清楚、有逻辑的表达，展示给别人？ 1.6 发展 深层网络训练中，梯度消失问题 方法：无监督预训练对权值进行初始化+有监督训练微调 ReLU激活函数被提出，能够有效的抑制梯度消失问题 Loss的局部极值问题 对于深层网络来说影响可以忽略 原因：深层网络虽然局部极值非常多，但是通过DL的BatchGradientDescent优化方法很难陷进去，而且就算陷进去，其局部极小值点与全局极小值点也是非常接近，但是浅层网络却不然，其拥有较少的局部极小值点，但是却很容易陷进去，且这些局部极小值点与全局极小值点相差较大 1.</description></item><item><title>HPC - CUDA</title><link>https://lunarwhite.github.io/posts/guides/hpc-cuda/</link><pubDate>Sun, 02 May 2021 11:38:49 +0000</pubDate><guid>https://lunarwhite.github.io/posts/guides/hpc-cuda/</guid><description>1 初识与CUDA 1.0 基础概念 主机端-设备端（Host-Device） 内核函数（Kernel Function） 线程模型（Thread Model） 存储模型（Memory Model） 执行模型（CUDA Execution Model） GPU连接节点 ssh gpu01
1.1 kernel示例 __global__ void VecAdd(float* A, float* B, float* C){ int i = threadIdx.x; C[i] = A[i] + B[i]; } int main(){ VecAdd&amp;lt;&amp;lt;&amp;lt;1, N&amp;gt;&amp;gt;&amp;gt;(A, B, C); } 1.2 线程模型 __global__ void kernel(float* parameter); dim3 DimGrid(3, 2); //6 thread blocks dim3 DimBlock(16, 16); //256 threads per block kernel&amp;lt;&amp;lt;&amp;lt;DimGrid, DimBlock&amp;gt;&amp;gt;&amp;gt;(float* parameter) 1.</description></item><item><title>HPC - OpenMP</title><link>https://lunarwhite.github.io/posts/guides/hpc-openmp/</link><pubDate>Fri, 30 Apr 2021 19:18:01 +0000</pubDate><guid>https://lunarwhite.github.io/posts/guides/hpc-openmp/</guid><description>1 初识与OpenMP 1.1 OpenMP基本结构 #include &amp;lt;stdlib.h&amp;gt;#include &amp;lt;omp.h&amp;gt;#include &amp;lt;stdio.h&amp;gt;#define NUM_THREADS 8 //设置线程数目为8 int main(){ //--串行区，由一个初始线程执行 static long num_steps=1000000000; double step; int i; double x,pi,sum=0.0; step=1.0/(double) num_steps; //调用运行时库函数，为后面的并行区设置线程数目 omp_set_num_threads(NUM_THREADS); //编译指导语句，创建一个并行区。在该并行区中多线程执行 #pragma omp parallel for reduction(+:sum) private(x) //--并行区，该区域由8个线程并行执行 for(i=0;i&amp;lt;num_steps;i++){ x=(i+0.5)*step; sum+=4.0/(1.0+x*x); } //--串行区，只有一个主线程执行 pi=step*sum; printf(&amp;#34;Pi=%21.20f(%ld steps)\n&amp;#34;,pi,num_steps); return 0; } icc -openmp -o 3-1 3-1.c ./3-1 1.2 循环并行化 #include &amp;lt;stdlib.h&amp;gt;#include &amp;lt;omp.h&amp;gt;#include &amp;lt;stdio.h&amp;gt;#define NUM_THREADS 8 //设置线程数目为8 #define N 100 int main(){ //--串行区，由一个初始线程执行 int i; int x[N]; int y[N]; int z[N]; //初始化x[i] y[i] for(i=0; i&amp;lt;N; i++){ x[i]=i; y[i]=i*i; } //调用运行时库函数，为后面的并行区设置线程数目 omp_set_num_threads(NUM_THREADS); //编译指导语句，创建一个并行区。在该并行区中多线程执行 #pragma omp parallel for for(i=0; i&amp;lt;N; i++){ //--并行区，该区域由8个线程并行执行 z[i] = x[i]+y[i]; } //--串行区，只有一个主线程执行 for(i=0; i&amp;lt;N; i++){ printf(&amp;#34;z[%d]=x[%d]+y[%d]=%d\n&amp;#34;, i, i, i, z[i]); } return 0; } icc -openmp -o 3-2-2 3-2.</description></item><item><title>Deeplearning frameworks</title><link>https://lunarwhite.github.io/posts/guides/dl-frameworks/</link><pubDate>Sat, 24 Apr 2021 20:20:48 +0000</pubDate><guid>https://lunarwhite.github.io/posts/guides/dl-frameworks/</guid><description>1 SkLearn 1.1 参考 https://sklearn.apachecn.org/ https://scikit-learn.org/stable/user_guide.html 2 Keras 2.1 参考 https://keras.io/zh/ 2.2 损失函数 二分类 binary_crossentropy 多分类 categorical_crossentropy one-hot编码 sparse_categorical_crossentropy 数字编码 kullback_leibler_divergence hinge 多用于SVM categorical_hinge squared_hinge poisson 回归 mean_squared_error mean_absolute_error mean_absolute_percentage_error mean_squared_logarithmic_error logcosh cosine_proximity 2.3 优化方法 列表 SGD() RMSprop() Adagrad() Adadelta() Adam() Adamax() Nadam()</description></item><item><title>HPC - MPI</title><link>https://lunarwhite.github.io/posts/guides/hpc-mpi/</link><pubDate>Fri, 02 Apr 2021 18:18:49 +0000</pubDate><guid>https://lunarwhite.github.io/posts/guides/hpc-mpi/</guid><description>1 初识与MPI 1.1 hello-world #include&amp;#34;mpi.h&amp;#34;#include&amp;lt;stdio.h&amp;gt;#include&amp;lt;math.h&amp;gt;void main(int argc, char *argv[]){ // 相关变量声明 int numprocs; int procnum; int namelen; char pro_name[MPI_MAX_PROCESSOR_NAME]; // 初始化MPI环境 MPI_Init(&amp;amp;argc, &amp;amp;argv); // MPI程序体 MPI_Comm_rank(MPI_COMM_WORLD, &amp;amp;procnum); MPI_Comm_size(MPI_COMM_WORLD, &amp;amp;numprocs); MPI_Get_processor_name(pro_name, &amp;amp;namelen); printf(&amp;#34;Hello World! Hello HPC! Processor %d of %d on %s \n&amp;#34;, procnum, numprocs, pro_name); // 退出MPI环境 MPI_Finalize(); } // MPI并行程序的编译 mpicc -o 1-1 1-1.c // MPI程序运行，-np 或 -n 用来指定运行程序的进程数目 mpirun -np 4 1-1 1.2 简单的发送和接收 进程0向进程1发送一个整数，进程接收到后，将其打印到屏幕 #include&amp;lt;stdio.</description></item><item><title>MySQL</title><link>https://lunarwhite.github.io/posts/guides/mysql/</link><pubDate>Thu, 05 Nov 2020 17:08:43 +0000</pubDate><guid>https://lunarwhite.github.io/posts/guides/mysql/</guid><description>1 常用命令 #start net start mysql #stop net stop mysql 2 测试脚本 新建 studentdb.sql 如下 /* Source Host : localhost:3306 Source Database : studentdb Target Server Type : MYSQL Target Server Version : 50642 File Encoding : 65001 */ SET FOREIGN_KEY_CHECKS=0; -- ---------------------------- -- Table structure for `stuscore` -- ---------------------------- DROP TABLE IF EXISTS `stuscore`; CREATE TABLE `stuscore` ( `id` varchar(6) NOT NULL, `name` varchar(8) DEFAULT NULL, `gender` varchar(2) DEFAULT NULL, `score` int(3) DEFAULT NULL, PRIMARY KEY (`id`) ) ENGINE=InnoDB DEFAULT CHARSET=utf8; -- ---------------------------- -- Records of stuscore -- ---------------------------- INSERT INTO `stuscore` VALUES (&amp;#39;600001&amp;#39;, &amp;#39;宋皓宇&amp;#39;, &amp;#39;男&amp;#39;, &amp;#39;71&amp;#39;); INSERT INTO `stuscore` VALUES (&amp;#39;620395&amp;#39;, &amp;#39;张一弛&amp;#39;, &amp;#39;男&amp;#39;, &amp;#39;88&amp;#39;); INSERT INTO `stuscore` VALUES (&amp;#39;800001&amp;#39;, &amp;#39;贺楠苏&amp;#39;, &amp;#39;男&amp;#39;, &amp;#39;86&amp;#39;); INSERT INTO `stuscore` VALUES (&amp;#39;800002&amp;#39;, &amp;#39;张梓煜&amp;#39;, &amp;#39;男&amp;#39;, &amp;#39;83&amp;#39;); INSERT INTO `stuscore` VALUES (&amp;#39;800003&amp;#39;, &amp;#39;徐坤&amp;#39;, &amp;#39;男&amp;#39;, &amp;#39;76&amp;#39;); INSERT INTO `stuscore` VALUES (&amp;#39;800004&amp;#39;, &amp;#39;王茂赟&amp;#39;, &amp;#39;男&amp;#39;, &amp;#39;65&amp;#39;); INSERT INTO `stuscore` VALUES (&amp;#39;800005&amp;#39;, &amp;#39;卢爽&amp;#39;, &amp;#39;女&amp;#39;, &amp;#39;67&amp;#39;); INSERT INTO `stuscore` VALUES (&amp;#39;800007&amp;#39;, &amp;#39;李长烨&amp;#39;, &amp;#39;男&amp;#39;, &amp;#39;55&amp;#39;); INSERT INTO `stuscore` VALUES (&amp;#39;800008&amp;#39;, &amp;#39;马馨竹&amp;#39;, &amp;#39;女&amp;#39;, &amp;#39;98&amp;#39;); INSERT INTO `stuscore` VALUES (&amp;#39;800009&amp;#39;, &amp;#39;王梓铭&amp;#39;, &amp;#39;男&amp;#39;, &amp;#39;92&amp;#39;); INSERT INTO `stuscore` VALUES (&amp;#39;800010&amp;#39;, &amp;#39;孙健恺&amp;#39;, &amp;#39;男&amp;#39;, &amp;#39;100&amp;#39;); INSERT INTO `stuscore` VALUES (&amp;#39;800011&amp;#39;, &amp;#39;赵雨萱&amp;#39;, &amp;#39;女&amp;#39;, &amp;#39;33&amp;#39;); INSERT INTO `stuscore` VALUES (&amp;#39;800012&amp;#39;, &amp;#39;李明睿&amp;#39;, &amp;#39;男&amp;#39;, &amp;#39;56&amp;#39;); INSERT INTO `stuscore` VALUES (&amp;#39;800013&amp;#39;, &amp;#39;程云杨&amp;#39;, &amp;#39;男&amp;#39;, &amp;#39;79&amp;#39;); INSERT INTO `stuscore` VALUES (&amp;#39;800014&amp;#39;, &amp;#39;李可欣&amp;#39;, &amp;#39;女&amp;#39;, &amp;#39;83&amp;#39;); INSERT INTO `stuscore` VALUES (&amp;#39;800015&amp;#39;, &amp;#39;李闻天&amp;#39;, &amp;#39;男&amp;#39;, &amp;#39;78&amp;#39;); INSERT INTO `stuscore` VALUES (&amp;#39;800016&amp;#39;, &amp;#39;何朝旭&amp;#39;, &amp;#39;男&amp;#39;, &amp;#39;88&amp;#39;); INSERT INTO `stuscore` VALUES (&amp;#39;800017&amp;#39;, &amp;#39;杨章驰&amp;#39;, &amp;#39;男&amp;#39;, &amp;#39;89&amp;#39;); INSERT INTO `stuscore` VALUES (&amp;#39;800018&amp;#39;, &amp;#39;张浩阳&amp;#39;, &amp;#39;男&amp;#39;, &amp;#39;83&amp;#39;); INSERT INTO `stuscore` VALUES (&amp;#39;800019&amp;#39;, &amp;#39;尹丹彤&amp;#39;, &amp;#39;女&amp;#39;, &amp;#39;76&amp;#39;); INSERT INTO `stuscore` VALUES (&amp;#39;800020&amp;#39;, &amp;#39;孟鸽&amp;#39;, &amp;#39;女&amp;#39;, &amp;#39;91&amp;#39;); INSERT INTO `stuscore` VALUES (&amp;#39;800021&amp;#39;, &amp;#39;吴昌鸿&amp;#39;, &amp;#39;男&amp;#39;, &amp;#39;82&amp;#39;); INSERT INTO `stuscore` VALUES (&amp;#39;800022&amp;#39;, &amp;#39;耿嘉辉&amp;#39;, &amp;#39;男&amp;#39;, &amp;#39;70&amp;#39;); INSERT INTO `stuscore` VALUES (&amp;#39;800023&amp;#39;, &amp;#39;梁鹤飞&amp;#39;, &amp;#39;男&amp;#39;, &amp;#39;64&amp;#39;); INSERT INTO `stuscore` VALUES (&amp;#39;800024&amp;#39;, &amp;#39;李腾飞&amp;#39;, &amp;#39;男&amp;#39;, &amp;#39;55&amp;#39;); INSERT INTO `stuscore` VALUES (&amp;#39;800025&amp;#39;, &amp;#39;张岩&amp;#39;, &amp;#39;女&amp;#39;, &amp;#39;61&amp;#39;); INSERT INTO `stuscore` VALUES (&amp;#39;800026&amp;#39;, &amp;#39;曾永泽&amp;#39;, &amp;#39;男&amp;#39;, &amp;#39;78&amp;#39;); INSERT INTO `stuscore` VALUES (&amp;#39;800027&amp;#39;, &amp;#39;何毅辉&amp;#39;, &amp;#39;男&amp;#39;, &amp;#39;70&amp;#39;); INSERT INTO `stuscore` VALUES (&amp;#39;800028&amp;#39;, &amp;#39;庄伯语&amp;#39;, &amp;#39;男&amp;#39;, &amp;#39;59&amp;#39;); INSERT INTO `stuscore` VALUES (&amp;#39;800029&amp;#39;, &amp;#39;许艺帆&amp;#39;, &amp;#39;男&amp;#39;, &amp;#39;80&amp;#39;); INSERT INTO `stuscore` VALUES (&amp;#39;800030&amp;#39;, &amp;#39;赫明佳&amp;#39;, &amp;#39;女&amp;#39;, &amp;#39;47&amp;#39;); INSERT INTO `stuscore` VALUES (&amp;#39;800031&amp;#39;, &amp;#39;申亦轩&amp;#39;, &amp;#39;女&amp;#39;, &amp;#39;56&amp;#39;); INSERT INTO `stuscore` VALUES (&amp;#39;800610&amp;#39;, &amp;#39;袁立钊&amp;#39;, &amp;#39;男&amp;#39;, &amp;#39;79&amp;#39;); INSERT INTO `stuscore` VALUES (&amp;#39;810235&amp;#39;, &amp;#39;刘晓奇&amp;#39;, &amp;#39;男&amp;#39;, &amp;#39;78&amp;#39;);</description></item><item><title>SQL</title><link>https://lunarwhite.github.io/posts/guides/sql/</link><pubDate>Fri, 30 Oct 2020 20:21:48 +0000</pubDate><guid>https://lunarwhite.github.io/posts/guides/sql/</guid><description>1 建表添加约束 not null primary key foreign key auto_increment default (e.g. getdate()) check (e.g. value)</description></item><item><title>Java</title><link>https://lunarwhite.github.io/posts/guides/java/</link><pubDate>Wed, 30 Sep 2020 20:21:48 +0000</pubDate><guid>https://lunarwhite.github.io/posts/guides/java/</guid><description>1 命名规范 package/project: hellojava class: MyPeople variable value/method: myAge, getGender() constant value: TEMP_PI</description></item><item><title>C++</title><link>https://lunarwhite.github.io/posts/guides/cpp/</link><pubDate>Sat, 06 Jun 2020 20:21:48 +0000</pubDate><guid>https://lunarwhite.github.io/posts/guides/cpp/</guid><description>1 基础语法 1.1 输入输出 ⽤cin读⼊字符串的时候，是以空格为分隔符的，如果想要读⼊⼀整⾏的字符串，就需要⽤getline string s; getline(cin,s); //读取⼀⾏的字符串，包括空格 cout&amp;lt;&amp;lt;s.length(); //输出字符串s的⻓度 换行\n和endl有区别，后者输出一个换行符，并立即刷新缓冲区，使得栈中的东西刷新一次。过多的 endl 是影响程序执行效率低下的因素之一。 &amp;quot; &amp;quot; &amp;lt; &amp;gt;头文件也有区别，前者优先在本地目录下找，找不到再去系统目录。 cout多行时，正确姿势： cout&amp;lt;&amp;lt;&amp;#34;Forst line there.\n&amp;#34; &amp;lt;&amp;lt;&amp;#34;Second line here.\n&amp;#34; 真正的开发中，尽量避免使用using namespace std;等直接引入整个命名空间,否则会因为命名空间污染导致很多不必要的问题。比如自己写的某个函数，名称正好和std中的一样，编译器会不知道使用哪一个，引起编译报错。 extern int a;，只是声明有个变量a存在，具体在哪定义，需要编译器找。 static全局变量：改变作用范围，不改变存储位置；static局部变量：改变存储位置，不改变作用范围。 访问结构成员，用点运算符；通过指针访问结构成员，用箭头运算符。 1.2 字符串 substr，截取某个字符串中的⼦串，⽤法有两种形式： string s2=s.substr(4); //从下标4开始⼀直到结束 string s3=s.substr(5,3); //从下标5开始，3个字符 String 类实例： string s=&amp;#34;vscode&amp;#34;; //append s.append(&amp;#34;hello&amp;#34;); //delete int pos=s.find(&amp;#34;ll&amp;#34;); s.replace(pos,4,&amp;#34;&amp;#34;); // 从pos开始后的4个字符替换为空，即删除 //find int first=s.find_first_of(&amp;#34;.&amp;#34;); //从头开始寻找字符&amp;#39;.&amp;#39;的位置 int last=s.</description></item><item><title>Python</title><link>https://lunarwhite.github.io/posts/guides/python/</link><pubDate>Thu, 30 Apr 2020 20:21:48 +0000</pubDate><guid>https://lunarwhite.github.io/posts/guides/python/</guid><description>1 算数运算 乘法：3**2 Log(A) 其中A为0的情况会报警告。 定义一个epsilon=1e-8，np.log(A + epsilon) 2 数据类型 2.1 基本 type函数：type(12.3) 2.2 列表 结构 a=[1,2,3,4,5] 打印 print(a) 获取元素，索引0到1 a[0:2] 获取元素，索引0到最后 a[0:] 获取元素，索引0到倒数第二 a[:-1] 2.3 字典 结构 me={'height':180} 访问元素 me['height']，输出 180 添加元素 me[‘weight’]=70，print(me) 后输出 {'height': 180, 'weight': 70} 3 判断与循环 3.1 if hungry=False if hungry: ... print(&amp;#34;I&amp;#39;m hungry&amp;#34;) # 需要4个空格缩进4个字符 ... else: ... print(&amp;#34;I&amp;#39;m not hungry&amp;#34;) ... # 输出 I’m not hungry 3.</description></item><item><title>Conda</title><link>https://lunarwhite.github.io/posts/guides/conda/</link><pubDate>Sun, 12 Apr 2020 17:07:05 +0000</pubDate><guid>https://lunarwhite.github.io/posts/guides/conda/</guid><description>1 基本环境 1.1 检查pip python -m ensurepip python -m pip install --upgrade pip 1.2 换镜像源 conda config --add channels https://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/free conda config --add channels https://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/main conda config --add channels https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud/conda-forge conda config --add channels https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud/msys2 conda config --set show_channel_urls yes 1.3 管理环境 # 创建环境 conda create --name &amp;lt;env_name&amp;gt; &amp;lt;package_names&amp;gt; # 切换环境 activate &amp;lt;env_name&amp;gt; deactivate &amp;lt;env_name&amp;gt; # 显示已安 conda info --envs # 复制，后删除 conda create --name &amp;lt;new_env_name&amp;gt; --clone &amp;lt;copied_env_name&amp;gt; conda remove --name &amp;lt;env_name&amp;gt; --all 1.</description></item><item><title>Git</title><link>https://lunarwhite.github.io/posts/guides/git/</link><pubDate>Thu, 12 Mar 2020 20:20:48 +0000</pubDate><guid>https://lunarwhite.github.io/posts/guides/git/</guid><description>1 参考 2 常用 # 撤销 git reset --soft HEAD^</description></item></channel></rss>