<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>high-performance-computing on lunarwhite</title><link>https://lunarwhite.github.io/tags/high-performance-computing/</link><description>Recent content in high-performance-computing on lunarwhite</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><copyright>© lunarwhite</copyright><lastBuildDate>Wed, 30 Jun 2021 10:38:49 +0000</lastBuildDate><atom:link href="https://lunarwhite.github.io/tags/high-performance-computing/index.xml" rel="self" type="application/rss+xml"/><item><title>HPC - MIC</title><link>https://lunarwhite.github.io/posts/guides/hpc-mic/</link><pubDate>Wed, 30 Jun 2021 10:38:49 +0000</pubDate><guid>https://lunarwhite.github.io/posts/guides/hpc-mic/</guid><description>1 初识与MIC 1.0 MIC应用模式 CPU原生模式 offload：CPU为主MIC为辅模式（最常用） CPU与MIC对等模式 MIC为主CPU为辅模式 native：MIC原生模式 1.1 offload, pi #include&amp;lt;stdio.h&amp;gt;#include&amp;lt;stdlib.h&amp;gt;#include&amp;lt;math.h&amp;gt; int main(){ float pi=0.0f; int count=10000; int i; #pragma offload target (mic) #pragma omp parallel for reduction(+:pi) for(i=0;i&amp;lt;count;i++){ float t=(float)((i+0.</description></item><item><title>HPC - CUDA</title><link>https://lunarwhite.github.io/posts/guides/hpc-cuda/</link><pubDate>Sun, 02 May 2021 11:38:49 +0000</pubDate><guid>https://lunarwhite.github.io/posts/guides/hpc-cuda/</guid><description>1 初识与CUDA 1.0 基础概念 主机端-设备端（Host-Device） 内核函数（Kernel Function） 线程模型（Thread Model） 存储模型（Memory Model） 执行模型（CUDA Execution Model） GPU连接节点 ssh gpu01</description></item><item><title>HPC - OpenMP</title><link>https://lunarwhite.github.io/posts/guides/hpc-openmp/</link><pubDate>Fri, 30 Apr 2021 19:18:01 +0000</pubDate><guid>https://lunarwhite.github.io/posts/guides/hpc-openmp/</guid><description>1 初识与OpenMP 1.1 OpenMP基本结构 #include &amp;lt;stdlib.h&amp;gt;#include &amp;lt;omp.h&amp;gt;#include &amp;lt;stdio.h&amp;gt;#define NUM_THREADS 8 //设置线程数目为8 int main(){ //--串行区，由一个初始线程执行 static long num_steps=1000000000; double step; int i; double x,pi,sum=0.</description></item><item><title>HPC - MPI</title><link>https://lunarwhite.github.io/posts/guides/hpc-mpi/</link><pubDate>Fri, 02 Apr 2021 18:18:49 +0000</pubDate><guid>https://lunarwhite.github.io/posts/guides/hpc-mpi/</guid><description>1 初识与MPI 1.1 hello-world #include&amp;#34;mpi.h&amp;#34;#include&amp;lt;stdio.h&amp;gt;#include&amp;lt;math.h&amp;gt;void main(int argc, char *argv[]){ // 相关变量声明 int numprocs; int procnum; int namelen; char pro_name[MPI_MAX_PROCESSOR_NAME]; // 初始化MPI环境 MPI_Init(&amp;amp;argc, &amp;amp;argv); // MPI程序体 MPI_Comm_rank(MPI_COMM_WORLD, &amp;amp;procnum); MPI_Comm_size(MPI_COMM_WORLD, &amp;amp;numprocs); MPI_Get_processor_name(pro_name, &amp;amp;namelen); printf(&amp;#34;Hello World!</description></item></channel></rss>