<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>data-structure on lunarwhite</title><link>https://lunarwhite.github.io/tags/data-structure/</link><description>Recent content in data-structure on lunarwhite</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><copyright>© lunarwhite</copyright><lastBuildDate>Mon, 21 Jun 2021 11:12:00 +0000</lastBuildDate><atom:link href="https://lunarwhite.github.io/tags/data-structure/index.xml" rel="self" type="application/rss+xml"/><item><title>COVID19 sentiment data analysis</title><link>https://lunarwhite.github.io/posts/assigns/ds-covid/</link><pubDate>Mon, 21 Jun 2021 11:12:00 +0000</pubDate><guid>https://lunarwhite.github.io/posts/assigns/ds-covid/</guid><description>本项目为数据结构课程设计的设计&amp;amp;开发文档
代码仓库在这里
1 引言 1.1 编写目的 公众情绪一直复杂多元，随着信息化程度的提高与大数据、人工智能等技术的不断普及又得以放大，让更多人的情感和想法得以在网络上得到表达与传播，传播范围比以往更大。新冠疫情于去年一月开始爆发，转眼间已经过去了一年多，疫情在国内得到了有效的控制。回顾这个过程，疫情下形成了特殊的网络社会心态和公众情绪。多元复杂的公众情绪，借助网络的力量传播和放大。但也方便了收集数据，并研究情绪变化的具体过程。
因此基于此次疫情，借助适宜的数据、分析手段和自然语言处理技术，希望在一定程度上了解新冠疫情这一特殊事件，在其自身不同发展阶段对中国大众心态的影响，以大数据技术研究中国大众的网络社会心态及其变化规律，进而形成引导公众情绪、维护社会稳定的参考性依据，或许有助于未来的类似事件的应对。
1.2 项目概述 以微博为代表的社交媒体上广泛的传播各种疫情信息，在疫情阶段发挥着比较重要的信息传输作用。本次作业的目的就是深入分析疫情信息中蕴含的网民情绪及其变化情况。以新冠肺炎疫情相关的短微博和相关新闻下的评论作为主要研究对象，首先爬取大量数据，利用心态词典方法可以大致观察心态演变，并结合层次聚类法从中分析网民关注热点，最后通过可视化方法展现相应的结果。
1.3 可行性分析 1）市场可行性：有助于平台运营人员乃至普通群众以可视化这种友好的交互方式分析、及时准确把握舆情变化，和不同阶段大众心态的影响。进而便于引导公众情绪、维护社会稳定，并对未来的类似突发事件的应对产生参考性意义。
2）技术可行性：数据源、数据量的支持，爬虫技术的成熟，机器学习尤其是自然语言处理方向发展如火如荼，文本情感分析技术趋于成熟，Python 有大量的可视化分析的第三方库，如pyecharts、matplotlib等。
1.4 术语和缩略语 [1] 聚类分析：聚类分析（英语：Cluster analysis）亦称为群集分析，是对于统计数据分析的一门技术，在许多领域受到广泛应用，包括机器学习，数据挖掘，模式识别，图像分析以及生物信息。聚类是把相似的对象通过静态分类的方法分成不同的组别或者更多的子集（subset），这样让在同一个子集中的成员对象都有相似的一些属性，常见的包括在坐标系中更加短的空间距离等。一般把数据聚类归纳为一种非监督式学习。</description></item><item><title>Huffman encoding and decoding using Python and PyQt</title><link>https://lunarwhite.github.io/posts/assigns/ds-gui-huffman/</link><pubDate>Fri, 26 Mar 2021 20:50:38 +0000</pubDate><guid>https://lunarwhite.github.io/posts/assigns/ds-gui-huffman/</guid><description>1 要求 1.1 简介 初始化 (Initialization)：从终端读入n个字符，建立哈夫曼树； 编码 (Coding)：利用已建好的哈夫曼树，对字符进行编码，然后将正文编码结果存入文件codefile中； 译码 (Decoding)：利用已建好的哈夫曼树将文件codefile中的代码进行译码，结果存入文件textfile中。 1.2 思路 （待写 2 实现 2.1 环境 Python3.</description></item><item><title>File word retrieval and statistics using Python</title><link>https://lunarwhite.github.io/posts/assigns/ds-word-stat/</link><pubDate>Sat, 19 Dec 2020 19:48:51 +0000</pubDate><guid>https://lunarwhite.github.io/posts/assigns/ds-word-stat/</guid><description>1 要求 1.1 简介 给定一个文本文件，要求统计给定单词在文本中出现的总次数，并检索输出某个单词出现在文本中的行号、在该行中出现的次数以及位置。
1.2思路 可以分为主控菜单程序和另外三个部分实现：
零、主控菜单程序 (1) 头文件包含 (2) 菜单选项包括 建立文件 单词计数 单词定位 退出程序 (3) 选择1-4执行相应的操作，其他字符为非法 一、建立一个文本文件，文件名由用户用键盘输入 实现过程 (1) 定义一个串变量 (2) 定义文本文件 (3) 输入文件名，打开该文件 (4) 循环读入文本行，写入文本文件 (5) 关闭文件 二、给定单词计数，输入一个不含空格的单词，统计输出该单词在文本中的出现次数 实现设计 要用到模式匹配算法，逐行扫描文本文件。匹配一个，计数器加1，直到整个文件扫描结束；然后输出单词出现的次数 朴素模式匹配算法的基本思路是将给定字串与主串从第一个字符开始比较，找到首次与子串完全匹配的子串为止，并记住该位置。 但为了实现统计子串出现的个数，不仅需要从主串的第一个字符位置开始比较，而且需要从主串的任一位置检索匹配字符串。 实现过程 (1) 输入要检索的文本文件名，打开相应的文件 (2) 输入要检索统计的单词 (3) 循环读文本文件，读入一行，将其送入定义好的串中，并求该串的实际长度，调用串匹配函数进行计数 (4) 关闭文件，输出统计结果 三、检索给定单词，输入一个单词，检索并输出该单词所在的行号、该行中出现的次数以及在该行中的相应位置。 实现设计 同上一个设计类似，但是要相对复杂一些 实现过程 (1) 输入要检索的文本文件名，打开相应的文件 (2) 输入要检索统计的单词 (3) 循环读文本文件，读入一行，将其送入定义好的串中，并求该串的实际长度。行计数器置初值0，调用串匹配函数进行计数。如果 行单词计数器!</description></item></channel></rss>