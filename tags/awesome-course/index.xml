<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>awesome-course on lunarwhite</title><link>https://lunarwhite.github.io/tags/awesome-course/</link><description>Recent content in awesome-course on lunarwhite</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><copyright>© lunarwhite</copyright><lastBuildDate>Tue, 03 Aug 2021 19:41:22 +0000</lastBuildDate><atom:link href="https://lunarwhite.github.io/tags/awesome-course/index.xml" rel="self" type="application/rss+xml"/><item><title>[MIT-missing] 07 Potpourri, Q&amp;A</title><link>https://lunarwhite.github.io/posts/notes/mitmissing7/</link><pubDate>Tue, 03 Aug 2021 19:41:22 +0000</pubDate><guid>https://lunarwhite.github.io/posts/notes/mitmissing7/</guid><description>Potpourri - missing-semester
Q&amp;amp;A - missing-semester
1 Daemons Most computers have a series of processes that are always running in the background rather than waiting for a user to launch them and interact with them. These processes are called daemons and the programs that run as daemons often end with a d to indicate so. For example sshd, the SSH daemon, is the program responsible for listening to incoming SSH requests and checking that the remote user has the necessary credentials to log in.</description></item><item><title>[MIT-missing] 06 Security &amp; Cryptography</title><link>https://lunarwhite.github.io/posts/notes/mitmissing6/</link><pubDate>Thu, 29 Jul 2021 14:51:12 +0000</pubDate><guid>https://lunarwhite.github.io/posts/notes/mitmissing6/</guid><description>Security and Cryptography - missing-semester
1 Entropy Entropy is a measure of randomness. This is useful, for example, when determining the strength of a password. Entropy is measured in bits, and when selecting uniformly at random from a set of possible outcomes, the entropy is equal to log_2(# of possibilities). A fair coin flip gives 1 bit of entropy. A dice roll (of a 6-sided die) has ~2.</description></item><item><title>[MIT-missing] 05 Metaprogramming</title><link>https://lunarwhite.github.io/posts/notes/mitmissing5/</link><pubDate>Tue, 27 Jul 2021 21:01:18 +0000</pubDate><guid>https://lunarwhite.github.io/posts/notes/mitmissing5/</guid><description>Metaprogramming - missing-semester
1 build systems make is one of the most common build systems out there. When you run make, it consults a file called Makefile in the current directory. All the targets, their dependencies, and the rules are defined in that file. Let’s take a look at one: paper.pdf: paper.tex plot-data.png pdflatex paper.tex plot-%.png: %.dat plot.py ./plot.py -i $*.dat -o $@ Each directive in this file is a rule for how to produce the left-hand side using the right-hand side.</description></item><item><title>[MIT-missing] 04 Version Control (Git)</title><link>https://lunarwhite.github.io/posts/notes/mitmissing4/</link><pubDate>Sun, 25 Jul 2021 22:11:48 +0000</pubDate><guid>https://lunarwhite.github.io/posts/notes/mitmissing4/</guid><description>Version Control (Git) - missing-semester
1 git’s data model 1.1 snapshots Git models the history of a collection of files and folders within some top-level directory as a series of snapshots. In Git terminology, a file is called a “blob”, and it’s just a bunch of bytes. A directory is called a “tree”, and it maps names to blobs or trees (so directories can contain other directories). A snapshot is the top-level tree that is being tracked.</description></item><item><title>[MIT-missing] 03 Command-line Environment</title><link>https://lunarwhite.github.io/posts/notes/mitmissing3/</link><pubDate>Sat, 24 Jul 2021 20:11:48 +0000</pubDate><guid>https://lunarwhite.github.io/posts/notes/mitmissing3/</guid><description>Command-line Environment - missing-semester
1 Job Control To kill a process, type Ctrl-C. To pause and backgrounding processes, type Ctrl-Z. 2 Aliases It can become tiresome typing long commands that involve many flags or verbose options. For this reason, most shells support aliasing. A shell alias is a short form for another command that your shell will replace automatically for you. For instance, an alias in bash has the following structure: alias alias_name=&amp;#34;command_to_alias arg1 arg2&amp;#34; Note that there is no space around the equal sign =, because alias is a shell command that takes a single argument.</description></item><item><title>[MS-Doc-Go] 6 Methods and Interfaces</title><link>https://lunarwhite.github.io/posts/notes/msdocgo6/</link><pubDate>Thu, 22 Jul 2021 16:26:51 +0000</pubDate><guid>https://lunarwhite.github.io/posts/notes/msdocgo6/</guid><description>Use methods and interfaces in Go
6.1 Methods 6.1.1 Declare methods Methods is a special type of func with a receiver before the func name. It&amp;rsquo;s useful when you want to group functions and tie them to a custom type Basic example, before you can declare a method, you have to create a struct type triangle struct { size int } func (t triangle) perimeter() int { return t.</description></item><item><title>[MIT-missing] 02 Data Wrangling</title><link>https://lunarwhite.github.io/posts/notes/mitmissing2/</link><pubDate>Thu, 22 Jul 2021 15:11:48 +0000</pubDate><guid>https://lunarwhite.github.io/posts/notes/mitmissing2/</guid><description>Data Wrangling - missing-semester
1 introduction To wrangle data, we need two things: data to wrangle, and something to do with it. Logs often make for a good use-case, because you often want to investigate things about them, and reading the whole thing isn’t feasible. Let’s figure out who’s trying to log into my server by looking at my server’s log: ssh myserver journalctl That’s far too much stuff.</description></item><item><title>[MS-Doc-Go] 5 Error Handling and Logging</title><link>https://lunarwhite.github.io/posts/notes/msdocgo5/</link><pubDate>Wed, 21 Jul 2021 17:46:11 +0000</pubDate><guid>https://lunarwhite.github.io/posts/notes/msdocgo5/</guid><description>Implement error handling and logging in Go
5.1 Error handling strategies Go&amp;rsquo;s approach to error handling is simply a control-flow mechanism where only an if and a return statement are needed package main import ( &amp;#34;fmt&amp;#34; &amp;#34;os&amp;#34; ) type Employee struct { ID int FirstName string LastName string Address string } func main() { employee, err := getInformation(1001) if err != nil { // Something is wrong.</description></item><item><title>[MIT-missing] 01 The shell</title><link>https://lunarwhite.github.io/posts/notes/mitmissing1/</link><pubDate>Wed, 21 Jul 2021 15:21:48 +0000</pubDate><guid>https://lunarwhite.github.io/posts/notes/mitmissing1/</guid><description>Course overview + the shell - missing-semester
Shell Tools and Scripting - missing-semester
01 - intro some commands 1.1 which which echo # /bin/echo which ls # /usr/bin/ls 1.2 $PATH echo $PATH # /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games 1.3 permission ls -l /home # drwxr-xr-x 18 himeself65 himeself65 4096 Aug 16 17:53 himeself65 d: tells us that himeself65 is a directory. rwx, r-x and r-x: &amp;ldquo;the owner&amp;rdquo;, &amp;ldquo;the owning group&amp;rdquo; and &amp;ldquo;everyone else&amp;rdquo;.</description></item><item><title>[MS-Doc-Go] 4 Arrays, Slices, Maps and Structs</title><link>https://lunarwhite.github.io/posts/notes/msdocgo4/</link><pubDate>Wed, 14 Jul 2021 22:21:19 +0000</pubDate><guid>https://lunarwhite.github.io/posts/notes/msdocgo4/</guid><description>Use data types and structs, arrays, slices, and maps in Go
4.1 Arrays Have to define the size when you declare or initialize them, also can&amp;rsquo;t resize them after they&amp;rsquo;re created. For these reasons, arrays aren&amp;rsquo;t commonly used in Go programs, but they&amp;rsquo;re the foundation for slices and maps Go initializes each element with the default data type Some ways to declare and init var city [3]string city[0] = &amp;#34;Shanghai&amp;#34; city := [4]string{&amp;#34;Shanghai&amp;#34;, &amp;#34;Beijing&amp;#34;, &amp;#34;Suzhou&amp;#34;} city := [.</description></item><item><title>[MS-Doc-Go] 3 Control Flows</title><link>https://lunarwhite.github.io/posts/notes/msdocgo3/</link><pubDate>Tue, 13 Jul 2021 20:41:42 +0000</pubDate><guid>https://lunarwhite.github.io/posts/notes/msdocgo3/</guid><description>Use control flows in Go
3.1 If&amp;hellip;else Basic example if num := givemeanumber(); num &amp;lt; 0 { fmt.Println(num, &amp;#34;is negative&amp;#34;) } else if num &amp;lt; 10 { fmt.Println(num, &amp;#34;has only one digit&amp;#34;) } else { fmt.Println(num, &amp;#34;has multiple digits&amp;#34;) } 3.2 Switch Basic example switch i { case 0: fmt.Print(&amp;#34;zero...&amp;#34;) case 1: fmt.Print(&amp;#34;one...&amp;#34;) case 2: fmt.Print(&amp;#34;two...&amp;#34;) default: fmt.Print(&amp;#34;no match...&amp;#34;) Use multiple expressions, by using , switch time.</description></item><item><title>[MS-Doc-Go] 2 Variables, Functions and Packages</title><link>https://lunarwhite.github.io/posts/notes/msdocgo2/</link><pubDate>Mon, 12 Jul 2021 10:11:08 +0000</pubDate><guid>https://lunarwhite.github.io/posts/notes/msdocgo2/</guid><description>Understand how to use packages, variables, and functions in Go
2.1 Variables 2.1.1 Declare variable One way var firstname, lastName string var age int Another way, using {} var { firstname, lastName string age int } Go will throw an error if you declare variables and don&amp;rsquo;t use them 2.1.2 Initialize variable One way var ( firstName string = &amp;#34;John&amp;#34; lastName string = &amp;#34;Doe&amp;#34; age int = 32 ) Another way, Go will infer the type automatically var ( firstName = &amp;#34;John&amp;#34; lastName = &amp;#34;Doe&amp;#34; age = 32 ) Even can be in a single line var ( firstName, lastName, age = &amp;#34;John&amp;#34;, &amp;#34;Doe&amp;#34;, 32 ) The most common way, using :=, but only csn use inside a function func main() { firstName, lastName := &amp;#34;John&amp;#34;, &amp;#34;Doe&amp;#34; age := 32 fmt.</description></item><item><title>[MS-Doc-Go] 1 Get Started</title><link>https://lunarwhite.github.io/posts/notes/msdocgo1/</link><pubDate>Sun, 11 Jul 2021 15:21:48 +0000</pubDate><guid>https://lunarwhite.github.io/posts/notes/msdocgo1/</guid><description>Get started with Go
1.1 Go principles 100% open source programs easy to share and distribute keep small, simple and fast cross-compiling concurrency is a first-class citizen automatic memory management official formatting large and comprehensive standard library 1.2 Install on windows By scoop package manager scoop install go Set folder location go env -w GOPATH=&amp;#39;D:\MEDOCUMEN\go&amp;#39; go env -w GOCACHE=&amp;#39;D:\MEDOCUMEN\go-build&amp;#39; Set proxy using https://goproxy.</description></item></channel></rss>