<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>c++ on lunarwhite</title><link>https://lunarwhite.github.io/tags/c++/</link><description>Recent content in c++ on lunarwhite</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><copyright>© lunarwhite</copyright><lastBuildDate>Sat, 06 Jun 2020 20:21:48 +0000</lastBuildDate><atom:link href="https://lunarwhite.github.io/tags/c++/index.xml" rel="self" type="application/rss+xml"/><item><title>C++</title><link>https://lunarwhite.github.io/posts/guides/cpp/</link><pubDate>Sat, 06 Jun 2020 20:21:48 +0000</pubDate><guid>https://lunarwhite.github.io/posts/guides/cpp/</guid><description>1 基础语法 1.1 输入输出 ⽤cin读⼊字符串的时候，是以空格为分隔符的，如果想要读⼊⼀整⾏的字符串，就需要⽤getline string s; getline(cin,s); //读取⼀⾏的字符串，包括空格 cout&amp;lt;&amp;lt;s.length(); //输出字符串s的⻓度 换行\n和endl有区别，后者输出一个换行符，并立即刷新缓冲区，使得栈中的东西刷新一次。过多的 endl 是影响程序执行效率低下的因素之一。 &amp;quot; &amp;quot; &amp;lt; &amp;gt;头文件也有区别，前者优先在本地目录下找，找不到再去系统目录。 cout多行时，正确姿势： cout&amp;lt;&amp;lt;&amp;#34;Forst line there.\n&amp;#34; &amp;lt;&amp;lt;&amp;#34;Second line here.\n&amp;#34; 真正的开发中，尽量避免使用using namespace std;等直接引入整个命名空间,否则会因为命名空间污染导致很多不必要的问题。比如自己写的某个函数，名称正好和std中的一样，编译器会不知道使用哪一个，引起编译报错。 extern int a;，只是声明有个变量a存在，具体在哪定义，需要编译器找。 static全局变量：改变作用范围，不改变存储位置；static局部变量：改变存储位置，不改变作用范围。 访问结构成员，用点运算符；通过指针访问结构成员，用箭头运算符。 1.2 字符串 substr，截取某个字符串中的⼦串，⽤法有两种形式： string s2=s.substr(4); //从下标4开始⼀直到结束 string s3=s.substr(5,3); //从下标5开始，3个字符 String 类实例： string s=&amp;#34;vscode&amp;#34;; //append s.append(&amp;#34;hello&amp;#34;); //delete int pos=s.find(&amp;#34;ll&amp;#34;); s.replace(pos,4,&amp;#34;&amp;#34;); // 从pos开始后的4个字符替换为空，即删除 //find int first=s.find_first_of(&amp;#34;.&amp;#34;); //从头开始寻找字符&amp;#39;.&amp;#39;的位置 int last=s.</description></item></channel></rss>