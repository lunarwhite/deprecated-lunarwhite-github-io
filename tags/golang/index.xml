<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>golang on lunarwhite</title><link>https://lunarwhite.github.io/tags/golang/</link><description>Recent content in golang on lunarwhite</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><copyright>Â© lunarwhite</copyright><lastBuildDate>Thu, 22 Jul 2021 16:26:51 +0000</lastBuildDate><atom:link href="https://lunarwhite.github.io/tags/golang/index.xml" rel="self" type="application/rss+xml"/><item><title>[MS-Doc-Go] 6 Methods and Interfaces</title><link>https://lunarwhite.github.io/posts/notes/msdocgo6/</link><pubDate>Thu, 22 Jul 2021 16:26:51 +0000</pubDate><guid>https://lunarwhite.github.io/posts/notes/msdocgo6/</guid><description>Use methods and interfaces in Go
6.1 Methods 6.1.1 Declare methods Methods is a special type of func with a receiver before the func name. It&amp;rsquo;s useful when you want to group functions and tie them to a custom type Basic example, before you can declare a method, you have to create a struct type triangle struct { size int } func (t triangle) perimeter() int { return t.</description></item><item><title>[MS-Doc-Go] 5 Error Handling and Logging</title><link>https://lunarwhite.github.io/posts/notes/msdocgo5/</link><pubDate>Wed, 21 Jul 2021 17:46:11 +0000</pubDate><guid>https://lunarwhite.github.io/posts/notes/msdocgo5/</guid><description>Implement error handling and logging in Go
5.1 Error handling strategies Go&amp;rsquo;s approach to error handling is simply a control-flow mechanism where only an if and a return statement are needed package main import ( &amp;#34;fmt&amp;#34; &amp;#34;os&amp;#34; ) type Employee struct { ID int FirstName string LastName string Address string } func main() { employee, err := getInformation(1001) if err != nil { // Something is wrong.</description></item><item><title>[MS-Doc-Go] 4 Arrays, Slices, Maps and Structs</title><link>https://lunarwhite.github.io/posts/notes/msdocgo4/</link><pubDate>Wed, 14 Jul 2021 22:21:19 +0000</pubDate><guid>https://lunarwhite.github.io/posts/notes/msdocgo4/</guid><description>Use data types and structs, arrays, slices, and maps in Go
4.1 Arrays Have to define the size when you declare or initialize them, also can&amp;rsquo;t resize them after they&amp;rsquo;re created. For these reasons, arrays aren&amp;rsquo;t commonly used in Go programs, but they&amp;rsquo;re the foundation for slices and maps Go initializes each element with the default data type Some ways to declare and init var city [3]string city[0] = &amp;#34;Shanghai&amp;#34; city := [4]string{&amp;#34;Shanghai&amp;#34;, &amp;#34;Beijing&amp;#34;, &amp;#34;Suzhou&amp;#34;} city := [.</description></item><item><title>[MS-Doc-Go] 3 Control Flows</title><link>https://lunarwhite.github.io/posts/notes/msdocgo3/</link><pubDate>Tue, 13 Jul 2021 20:41:42 +0000</pubDate><guid>https://lunarwhite.github.io/posts/notes/msdocgo3/</guid><description>Use control flows in Go
3.1 If&amp;hellip;else Basic example if num := givemeanumber(); num &amp;lt; 0 { fmt.Println(num, &amp;#34;is negative&amp;#34;) } else if num &amp;lt; 10 { fmt.Println(num, &amp;#34;has only one digit&amp;#34;) } else { fmt.Println(num, &amp;#34;has multiple digits&amp;#34;) } 3.2 Switch Basic example switch i { case 0: fmt.Print(&amp;#34;zero...&amp;#34;) case 1: fmt.Print(&amp;#34;one...&amp;#34;) case 2: fmt.Print(&amp;#34;two...&amp;#34;) default: fmt.Print(&amp;#34;no match...&amp;#34;) Use multiple expressions, by using , switch time.</description></item><item><title>[MS-Doc-Go] 2 Variables, Functions and Packages</title><link>https://lunarwhite.github.io/posts/notes/msdocgo2/</link><pubDate>Mon, 12 Jul 2021 10:11:08 +0000</pubDate><guid>https://lunarwhite.github.io/posts/notes/msdocgo2/</guid><description>Understand how to use packages, variables, and functions in Go
2.1 Variables 2.1.1 Declare variable One way var firstname, lastName string var age int Another way, using {} var { firstname, lastName string age int } Go will throw an error if you declare variables and don&amp;rsquo;t use them 2.1.2 Initialize variable One way var ( firstName string = &amp;#34;John&amp;#34; lastName string = &amp;#34;Doe&amp;#34; age int = 32 ) Another way, Go will infer the type automatically var ( firstName = &amp;#34;John&amp;#34; lastName = &amp;#34;Doe&amp;#34; age = 32 ) Even can be in a single line var ( firstName, lastName, age = &amp;#34;John&amp;#34;, &amp;#34;Doe&amp;#34;, 32 ) The most common way, using :=, but only csn use inside a function func main() { firstName, lastName := &amp;#34;John&amp;#34;, &amp;#34;Doe&amp;#34; age := 32 fmt.</description></item><item><title>[MS-Doc-Go] 1 Get Started</title><link>https://lunarwhite.github.io/posts/notes/msdocgo1/</link><pubDate>Sun, 11 Jul 2021 15:21:48 +0000</pubDate><guid>https://lunarwhite.github.io/posts/notes/msdocgo1/</guid><description>Get started with Go
1.1 Go principles 100% open source programs easy to share and distribute keep small, simple and fast cross-compiling concurrency is a first-class citizen automatic memory management official formatting large and comprehensive standard library 1.2 Install on windows By scoop package manager scoop install go Set folder location go env -w GOPATH=&amp;#39;D:\MEDOCUMEN\go&amp;#39; go env -w GOCACHE=&amp;#39;D:\MEDOCUMEN\go-build&amp;#39; Set proxy using https://goproxy.</description></item></channel></rss>